#!/usr/bin/env python
"""
–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Railway
"""

import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'smart_secretary.settings')
django.setup()

from core.models import Patient, Service, Specialist, Appointment, ContactMessage
from django.db.models import Q

print('üßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• –í –ü–†–û–î–ê–ö–®–ï–ù–ï')
print('=' * 60)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
TEST_KEYWORDS = [
    '—Ç–µ—Å—Ç', 'test', '–≥—Ä–∞–Ω–∏—á–Ω', '—Å—Ç—Ä–µ—Å—Å', '—Ñ–æ—Ä–º–∞', 'debug', 'sample',
    'example', 'demo', '–≤—Ä–µ–º–µ–Ω–Ω', 'temp', 'tmp', 'fake', 'dummy',
    '–Ω–∞–≥—Ä—É–∑–æ—á–Ω', '—Ç–µ—Å—Ç–æ–≤', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç', '–º–∞—Å—Å–∞–∂', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω'
]

def is_test_data(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤—ã–º"""
    if not text:
        return False
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in TEST_KEYWORDS)

def cleanup_specialists():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"""
    print('\nüë®‚Äç‚öïÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:')
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    test_specialists = []
    for specialist in Specialist.objects.all():
        if (is_test_data(specialist.name) or 
            is_test_data(specialist.specialty) or
            specialist.name in ['–°—Ç—Ä–µ—Å—Å –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–¢–µ—Å—Ç –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–¢–µ—Å—Ç–æ–≤—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', 
                               '–§–æ—Ä–º–∞ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–ì—Ä–∞–Ω–∏—á–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç']):
            test_specialists.append(specialist)
    
    print(f'  –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {len(test_specialists)}')
    
    for specialist in test_specialists:
        print(f'    - –£–¥–∞–ª—è–µ–º: {specialist.name} ({specialist.specialty})')
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        appointments = specialist.appointment_set.all()
        if appointments.exists():
            print(f'      –£–¥–∞–ª—è–µ–º {appointments.count()} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π')
            appointments.delete()
        
        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        specialist.delete()

def cleanup_services():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Å–ª—É–≥"""
    print('\nüè• –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Å–ª—É–≥:')
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏
    test_services = []
    for service in Service.objects.all():
        if (is_test_data(service.name) or
            service.name in ['–¢–µ—Å—Ç –£—Å–ª—É–≥–∞', '–¢–µ—Å—Ç–æ–≤–∞—è –£—Å–ª—É–≥–∞', '–°—Ç—Ä–µ—Å—Å –£—Å–ª—É–≥–∞', 
                           '–§–æ—Ä–º–∞ –£—Å–ª—É–≥–∞', '–ì—Ä–∞–Ω–∏—á–Ω–∞—è –£—Å–ª—É–≥–∞']):
            test_services.append(service)
    
    print(f'  –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Å–ª—É–≥: {len(test_services)}')
    
    for service in test_services:
        print(f'    - –£–¥–∞–ª—è–µ–º: {service.name} ({service.price}{service.currency})')
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        appointments = service.appointment_set.all()
        if appointments.exists():
            print(f'      –£–¥–∞–ª—è–µ–º {appointments.count()} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π')
            appointments.delete()
        
        # –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É
        service.delete()

def cleanup_patients():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
    print('\nüë• –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:')
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    test_patients = []
    for patient in Patient.objects.all():
        if (is_test_data(patient.name) or 
            is_test_data(patient.phone) or
            patient.name.startswith('–°—Ç—Ä–µ—Å—Å –ü–∞—Ü–∏–µ–Ω—Ç') or
            patient.name.startswith('–¢–µ—Å—Ç ') or
            '—Ç–µ—Å—Ç' in patient.name.lower()):
            test_patients.append(patient)
    
    print(f'  –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(test_patients)}')
    
    for patient in test_patients:
        print(f'    - –£–¥–∞–ª—è–µ–º: {patient.name} ({patient.phone})')
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        appointments = patient.appointment_set.all()
        if appointments.exists():
            print(f'      –£–¥–∞–ª—è–µ–º {appointments.count()} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π')
            appointments.delete()
        
        # –£–¥–∞–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
        patient.delete()

def cleanup_appointments():
    """–û—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    print('\nüìÖ –û—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:')
    
    # –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞–º–∏
    test_appointments = Appointment.objects.filter(
        Q(notes__icontains='—Ç–µ—Å—Ç') | 
        Q(notes__icontains='test') |
        Q(channel__icontains='test')
    )
    
    print(f'  –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {test_appointments.count()}')
    
    for appointment in test_appointments:
        print(f'    - –£–¥–∞–ª—è–µ–º: {appointment.patient.name} -> {appointment.specialist.name}')
        appointment.delete()

def show_remaining_data():
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ"""
    print('\nüìä –û–°–¢–ê–í–®–ò–ï–°–Ø –î–ê–ù–ù–´–ï –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò:')
    
    print(f'\n  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    print(f'    –ü–∞—Ü–∏–µ–Ω—Ç—ã: {Patient.objects.count()}')
    print(f'    –£—Å–ª—É–≥–∏: {Service.objects.count()}')
    print(f'    –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã: {Specialist.objects.count()}')
    print(f'    –ó–∞–ø–∏—Å–∏: {Appointment.objects.count()}')
    print(f'    –°–æ–æ–±—â–µ–Ω–∏—è: {ContactMessage.objects.count()}')
    
    print(f'\n  üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:')
    for specialist in Specialist.objects.all():
        print(f'    - {specialist.name} ({specialist.specialty})')
    
    print(f'\n  üè• –£—Å–ª—É–≥–∏ (–ø–µ—Ä–≤—ã–µ 10):')
    for service in Service.objects.all()[:10]:
        print(f'    - {service.name} ({service.price}{service.currency})')
    
    print(f'\n  üë• –ü–∞—Ü–∏–µ–Ω—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):')
    for patient in Patient.objects.all().order_by('-created_at')[:5]:
        print(f'    - {patient.name} ({patient.phone})')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ –ø–æ—Ä—è–¥–∫—É
    cleanup_specialists()
    cleanup_services() 
    cleanup_patients()
    cleanup_appointments()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    show_remaining_data()
    
    print('\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!')
    print('üéØ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!')

if __name__ == "__main__":
    main()
