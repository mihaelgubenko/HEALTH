"""
üìÖ –ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–†
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å —Å–∞–π—Ç–æ–º
"""

from datetime import datetime, timedelta, time
from typing import List, Dict, Optional, Tuple
from django.utils import timezone
from django.db.models import Q
from .models import Appointment, Specialist, Service, Patient

class InternalCalendar:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–î"""
    
    def __init__(self):
        self.timezone = timezone.get_current_timezone()
    
    def get_available_slots(self, specialist: Specialist, date: datetime.date, 
                          service_duration: int = 60) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞ –¥–∞—Ç—É
        
        Args:
            specialist: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
            date: –î–∞—Ç–∞
            service_duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        """
        # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (9:00 - 19:00)
        work_start = time(9, 0)
        work_end = time(19, 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
        busy_slots = self._get_busy_slots(specialist, date)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = []
        current_time = datetime.combine(date, work_start)
        end_time = datetime.combine(date, work_end)
        
        while current_time + timedelta(minutes=service_duration) <= end_time:
            slot_end = current_time + timedelta(minutes=service_duration)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Å–ª–æ—Ç —Å –∑–∞–Ω—è—Ç—ã–º–∏
            if not self._is_slot_busy(current_time, slot_end, busy_slots):
                available_slots.append({
                    'start_time': current_time,
                    'end_time': slot_end,
                    'formatted_time': current_time.strftime('%H:%M'),
                    'formatted_date': current_time.strftime('%d.%m.%Y')
                })
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ—Ç—É (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
            current_time += timedelta(minutes=30)
        
        return available_slots
    
    def _get_busy_slots(self, specialist: Specialist, date: datetime.date) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞ –¥–∞—Ç—É"""
        appointments = Appointment.objects.filter(
            specialist=specialist,
            start_time__date=date,
            status__in=['pending', 'confirmed']
        ).order_by('start_time')
        
        busy_slots = []
        for appointment in appointments:
            busy_slots.append({
                'start_time': appointment.start_time,
                'end_time': appointment.end_time
            })
        
        return busy_slots
    
    def _is_slot_busy(self, slot_start: datetime, slot_end: datetime, 
                     busy_slots: List[Dict]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç"""
        for busy_slot in busy_slots:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            if (slot_start < busy_slot['end_time'] and 
                slot_end > busy_slot['start_time']):
                return True
        return False
    
    def check_conflict(self, specialist: Specialist, start_time: datetime, 
                      end_time: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏"""
        conflicts = Appointment.objects.filter(
            specialist=specialist,
            start_time__lt=end_time,
            end_time__gt=start_time,
            status__in=['pending', 'confirmed']
        )
        return conflicts.exists()
    
    def get_appointments_by_date(self, specialist: Specialist, 
                               date: datetime.date) -> List[Appointment]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞ –¥–∞—Ç—É"""
        return Appointment.objects.filter(
            specialist=specialist,
            start_time__date=date
        ).order_by('start_time')
    
    def get_appointments_by_period(self, specialist: Specialist, 
                                 start_date: datetime.date, 
                                 end_date: datetime.date) -> List[Appointment]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        return Appointment.objects.filter(
            specialist=specialist,
            start_time__date__gte=start_date,
            start_time__date__lte=end_date
        ).order_by('start_time')

class CalendarSyncManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)"""
    
    def __init__(self):
        self.internal_calendar = InternalCalendar()
    
    # –£–î–ê–õ–ï–ù–û: sync_from_site –∏ sync_to_site (–≤–Ω–µ—à–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    
    def get_available_slots_with_sync(self, specialist: Specialist, 
                                    date: datetime.date, 
                                    service_duration: int = 60) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
        
        Args:
            specialist: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
            date: –î–∞—Ç–∞
            service_duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏
            
        Returns:
            List[Dict]: –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        return self.internal_calendar.get_available_slots(
            specialist, date, service_duration
        )

class DateParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—è"""
    
    def __init__(self):
        self.relative_dates = {
            '—Å–µ–≥–æ–¥–Ω—è': 0,
            '–∑–∞–≤—Ç—Ä–∞': 1,
            '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞': 2,
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': self._get_next_weekday(0),
            '–≤—Ç–æ—Ä–Ω–∏–∫': self._get_next_weekday(1),
            '—Å—Ä–µ–¥—É': self._get_next_weekday(2),
            '—á–µ—Ç–≤–µ—Ä–≥': self._get_next_weekday(3),
            '–ø—è—Ç–Ω–∏—Ü—É': self._get_next_weekday(4),
            '—Å—É–±–±–æ—Ç—É': self._get_next_weekday(5),
            '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': self._get_next_weekday(6),
        }
    
    def _get_next_weekday(self, weekday: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        today = timezone.now().date()
        days_ahead = weekday - today.weekday()
        if days_ahead <= 0:
            days_ahead += 7
        return days_ahead
    
    def extract_datetime(self, text: str) -> Optional[datetime]:
        """
        –ò–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            Optional[datetime]: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        """
        text_lower = text.lower().strip()
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã
        for date_word, days_offset in self.relative_dates.items():
            if date_word in text_lower:
                target_date = timezone.now().date() + timedelta(days=days_offset)
                
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                time_match = self._extract_time(text)
                if time_match:
                    hour, minute = time_match
                    return timezone.make_aware(
                        datetime.combine(target_date, time(hour, minute))
                    )
                else:
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É —Å 9:00
                    return timezone.make_aware(
                        datetime.combine(target_date, time(9, 0))
                    )
        
        return None
    
    def _extract_time(self, text: str) -> Optional[Tuple[int, int]]:
        """–ò–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        time_patterns = [
            r'(\d{1,2}):(\d{2})',  # 9:30, 14:00, 16:00
            r'(\d{1,2})\s*—á–∞—Å–æ–≤?',  # 9 —á–∞—Å–æ–≤, 14 —á–∞—Å–æ–≤, 16 —á–∞—Å–æ–≤
            r'–≤\s*(\d{1,2})',       # –≤ 9, –≤ 14, –≤ 16
            r'–Ω–∞\s*(\d{1,2})\s*:?\s*(\d{2})?',  # –Ω–∞ 16:00, –Ω–∞ 16
            r'(\d{1,2})\s*:\s*(\d{2})',  # 16 : 00 (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏)
        ]
        
        for pattern in time_patterns:
            match = re.search(pattern, text)
            if match:
                hour = int(match.group(1))
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ª—É—á–∞–∏ –≥—Ä—É–ø–ø
                if len(match.groups()) > 1 and match.group(2):
                    minute = int(match.group(2))
                else:
                    minute = 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    return (hour, minute)
        
        return None
    
    def format_available_slots(self, slots: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—è
        
        Args:
            slots: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if not slots:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        
        if len(slots) == 1:
            slot = slots[0]
            return f"–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–µ–º—è: {slot['formatted_time']} ({slot['formatted_date']})"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        slots_by_date = {}
        for slot in slots:
            date_str = slot['formatted_date']
            if date_str not in slots_by_date:
                slots_by_date[date_str] = []
            slots_by_date[date_str].append(slot['formatted_time'])
        
        result = "–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:\n"
        for date_str, times in slots_by_date.items():
            result += f"‚Ä¢ {date_str}: {', '.join(times)}\n"
        
        return result.strip()
