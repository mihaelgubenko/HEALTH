from django.core.management.base import BaseCommand
from django.db.models import Q
from core.models import Patient, Service, Specialist, Appointment, ContactMessage


class Command(BaseCommand):
    help = '–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--confirm',
            action='store_true',
            help='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        )

    def handle(self, *args, **options):
        if not options['confirm']:
            self.stdout.write(
                self.style.WARNING(
                    '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ --confirm\n'
                    'python manage.py cleanup_production --confirm'
                )
            )
            return

        self.stdout.write('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        test_keywords = [
            '—Ç–µ—Å—Ç', 'test', '–≥—Ä–∞–Ω–∏—á–Ω', '—Å—Ç—Ä–µ—Å—Å', '—Ñ–æ—Ä–º–∞', 'debug', 'sample',
            'example', 'demo', '–≤—Ä–µ–º–µ–Ω–Ω', 'temp', 'tmp', 'fake', 'dummy',
            '–Ω–∞–≥—Ä—É–∑–æ—á–Ω', '—Ç–µ—Å—Ç–æ–≤', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω'
        ]
        
        def is_test_data(text):
            if not text:
                return False
            text_lower = text.lower()
            return any(keyword in text_lower for keyword in test_keywords)

        # 1. –û—á–∏—Å—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        self.stdout.write('\nüë®‚Äç‚öïÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:')
        test_specialists = []
        
        for specialist in Specialist.objects.all():
            if (is_test_data(specialist.name) or 
                is_test_data(specialist.specialty) or
                specialist.name in ['–°—Ç—Ä–µ—Å—Å –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–¢–µ—Å—Ç –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', 
                                   '–¢–µ—Å—Ç–æ–≤—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–§–æ—Ä–º–∞ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', 
                                   '–ì—Ä–∞–Ω–∏—á–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç']):
                test_specialists.append(specialist)
        
        for specialist in test_specialists:
            appointments_count = specialist.appointment_set.count()
            self.stdout.write(f'  –£–¥–∞–ª—è–µ–º: {specialist.name} ({appointments_count} –∑–∞–ø–∏—Å–µ–π)')
            specialist.appointment_set.all().delete()
            specialist.delete()

        # 2. –û—á–∏—Å—Ç–∫–∞ —É—Å–ª—É–≥
        self.stdout.write('\nüè• –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Å–ª—É–≥:')
        test_services = []
        
        for service in Service.objects.all():
            if (is_test_data(service.name) or
                service.name in ['–¢–µ—Å—Ç –£—Å–ª—É–≥–∞', '–¢–µ—Å—Ç–æ–≤–∞—è –£—Å–ª—É–≥–∞', '–°—Ç—Ä–µ—Å—Å –£—Å–ª—É–≥–∞', 
                               '–§–æ—Ä–º–∞ –£—Å–ª—É–≥–∞', '–ì—Ä–∞–Ω–∏—á–Ω–∞—è –£—Å–ª—É–≥–∞']):
                test_services.append(service)
        
        for service in test_services:
            appointments_count = service.appointment_set.count()
            self.stdout.write(f'  –£–¥–∞–ª—è–µ–º: {service.name} ({appointments_count} –∑–∞–ø–∏—Å–µ–π)')
            service.appointment_set.all().delete()
            service.delete()

        # 3. –û—á–∏—Å—Ç–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
        self.stdout.write('\nüë• –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:')
        test_patients = []
        
        for patient in Patient.objects.all():
            if (is_test_data(patient.name) or 
                is_test_data(patient.phone) or
                patient.name.startswith('–°—Ç—Ä–µ—Å—Å –ü–∞—Ü–∏–µ–Ω—Ç') or
                patient.name.startswith('–¢–µ—Å—Ç ') or
                '—Ç–µ—Å—Ç' in patient.name.lower()):
                test_patients.append(patient)
        
        for patient in test_patients:
            appointments_count = patient.appointment_set.count()
            self.stdout.write(f'  –£–¥–∞–ª—è–µ–º: {patient.name} ({appointments_count} –∑–∞–ø–∏—Å–µ–π)')
            patient.appointment_set.all().delete()
            patient.delete()

        # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
        self.stdout.write(f'  –ü–∞—Ü–∏–µ–Ω—Ç—ã: {Patient.objects.count()}')
        self.stdout.write(f'  –£—Å–ª—É–≥–∏: {Service.objects.count()}')
        self.stdout.write(f'  –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã: {Specialist.objects.count()}')
        self.stdout.write(f'  –ó–∞–ø–∏—Å–∏: {Appointment.objects.count()}')
        
        self.stdout.write('\nüë®‚Äç‚öïÔ∏è –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:')
        for specialist in Specialist.objects.all():
            self.stdout.write(f'  - {specialist.name} ({specialist.specialty})')
        
        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        )
