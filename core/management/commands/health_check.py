from django.core.management.base import BaseCommand
from django.conf import settings
from django.utils import timezone
from core.models import Service, Specialist, Patient, Appointment, DialogLog
from core.lite_secretary import LiteSmartSecretary
import openai
from datetime import timedelta

class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—è'

    def add_arguments(self, parser):
        parser.add_argument(
            '--full',
            action='store_true',
            help='–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç –ò–ò',
        )

    def handle(self, *args, **options):
        self.stdout.write('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—è...\n')
        
        total_checks = 0
        passed_checks = 0
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        total_checks += 1
        try:
            services_count = Service.objects.count()
            specialists_count = Specialist.objects.count()
            patients_count = Patient.objects.count()
            
            self.stdout.write(f'‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {services_count} —É—Å–ª—É–≥, {specialists_count} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, {patients_count} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤')
            passed_checks += 1
        except Exception as e:
            self.stdout.write(f'‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}')
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API
        total_checks += 1
        try:
            if settings.OPENAI_API_KEY:
                client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": "test"}],
                    max_tokens=5,
                    timeout=5
                )
                self.stdout.write('‚úÖ OpenAI API: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
                passed_checks += 1
            else:
                self.stdout.write('‚ùå OpenAI API: –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        except Exception as e:
            self.stdout.write(f'‚ùå OpenAI API: {e}')
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—è
        if options['full']:
            total_checks += 1
            try:
                secretary = LiteSmartSecretary()
                test_response = secretary.process_message("—Ç–µ—Å—Ç", "health_check_session")
                
                if 'reply' in test_response:
                    self.stdout.write('‚úÖ –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å: –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è')
                    passed_checks += 1
                else:
                    self.stdout.write('‚ùå –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞')
            except Exception as e:
                self.stdout.write(f'‚ùå –ò–ò-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å: {e}')
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        total_checks += 1
        try:
            yesterday = timezone.now() - timedelta(hours=24)
            recent_dialogs = DialogLog.objects.filter(created_at__gte=yesterday).count()
            recent_appointments = Appointment.objects.filter(created_at__gte=yesterday).count()
            
            self.stdout.write(f'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (24—á): {recent_dialogs} –¥–∏–∞–ª–æ–≥–æ–≤, {recent_appointments} –∑–∞–ø–∏—Å–µ–π')
            passed_checks += 1
        except Exception as e:
            self.stdout.write(f'‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {e}')
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        total_checks += 1
        try:
            future_appointments = Appointment.objects.filter(
                start_time__gt=timezone.now(),
                status__in=['pending', 'confirmed']
            ).count()
            
            self.stdout.write(f'‚úÖ –ë—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏: {future_appointments} —à—Ç.')
            passed_checks += 1
        except Exception as e:
            self.stdout.write(f'‚ùå –ë—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏: {e}')
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        health_percentage = (passed_checks / total_checks) * 100
        
        self.stdout.write('\n' + '='*50)
        self.stdout.write(f'üè• –ó–î–û–†–û–í–¨–ï –°–ò–°–¢–ï–ú–´: {passed_checks}/{total_checks} ({health_percentage:.1f}%)')
        
        if health_percentage >= 80:
            self.stdout.write('üü¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!')
        elif health_percentage >= 60:
            self.stdout.write('üü° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏')
        else:
            self.stdout.write('üî¥ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è!')
        
        self.stdout.write('='*50)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if passed_checks < total_checks:
            self.stdout.write('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
            
            if not settings.OPENAI_API_KEY:
                self.stdout.write('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ')
            
            if recent_dialogs == 0:
                self.stdout.write('‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –Ω–∞ —Å–∞–π—Ç–µ')
            
            self.stdout.write('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Django –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–æ–∫')
            
        return f"Health check completed: {health_percentage:.1f}%"
