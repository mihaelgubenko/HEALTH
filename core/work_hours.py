"""
–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Ü–µ–Ω—Ç—Ä–∞
"""
from datetime import datetime, time
from typing import Tuple, Optional


class WorkHours:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Ü–µ–Ω—Ç—Ä–∞"""
    
    # –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    # None - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º
    SCHEDULE = {
        0: (10, 19),  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: 10:00 - 19:00
        1: (10, 19),  # –í—Ç–æ—Ä–Ω–∏–∫: 10:00 - 19:00
        2: (10, 19),  # –°—Ä–µ–¥–∞: 10:00 - 19:00
        3: (10, 19),  # –ß–µ—Ç–≤–µ—Ä–≥: 10:00 - 19:00
        4: None,      # –ü—è—Ç–Ω–∏—Ü–∞: –≤—ã—Ö–æ–¥–Ω–æ–π
        5: None,      # –°—É–±–±–æ—Ç–∞: –ù–µ —Ä–∞–±–æ—Ç–∞–µ–º
        6: (10, 19),  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 10:00 - 19:00
    }
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    DAY_NAMES = {
        0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        1: '–í—Ç–æ—Ä–Ω–∏–∫',
        2: '–°—Ä–µ–¥–∞',
        3: '–ß–µ—Ç–≤–µ—Ä–≥',
        4: '–ü—è—Ç–Ω–∏—Ü–∞',
        5: '–°—É–±–±–æ—Ç–∞',
        6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
    }
    
    @classmethod
    def is_work_day(cls, date: datetime.date) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Ä–∞–±–æ—á–∏–º
        
        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, False –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π
        """
        weekday = date.weekday()
        return cls.SCHEDULE.get(weekday) is not None
    
    @classmethod
    def get_work_hours(cls, date: datetime.date) -> Optional[Tuple[int, int]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        
        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—á–∞—Å_–Ω–∞—á–∞–ª–∞, —á–∞—Å_–æ–∫–æ–Ω—á–∞–Ω–∏—è) –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
        """
        weekday = date.weekday()
        return cls.SCHEDULE.get(weekday)
    
    @classmethod
    def get_work_start_time(cls, date: datetime.date) -> Optional[time]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è –¥–∞—Ç—ã
        
        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –û–±—ä–µ–∫—Ç time —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ None
        """
        hours = cls.get_work_hours(date)
        if hours:
            return time(hour=hours[0], minute=0)
        return None
    
    @classmethod
    def get_work_end_time(cls, date: datetime.date) -> Optional[time]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –¥–ª—è –¥–∞—Ç—ã
        
        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –û–±—ä–µ–∫—Ç time —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏–ª–∏ None
        """
        hours = cls.get_work_hours(date)
        if hours:
            return time(hour=hours[1], minute=0)
        return None
    
    @classmethod
    def is_within_work_hours(cls, dt: datetime) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
        
        Args:
            dt: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        if not cls.is_work_day(dt.date()):
            return False
        
        hours = cls.get_work_hours(dt.date())
        if not hours:
            return False
        
        start_hour, end_hour = hours
        current_hour = dt.hour
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
        if current_hour < start_hour or current_hour >= end_hour:
            return False
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å —Ä–∞–±–æ—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—É—Ç—ã
        if current_hour == end_hour - 1 and dt.minute > 30:
            return False
        
        return True
    
    @classmethod
    def get_schedule_text(cls) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        """
        return """üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:
‚Ä¢ –í—Å, –ü–Ω, –í—Ç, –°—Ä, –ß—Ç: 10:00-19:00
‚Ä¢ –ü—Ç: –ù–µ —Ä–∞–±–æ—Ç–∞–µ–º
‚Ä¢ –°–±: –ù–µ —Ä–∞–±–æ—Ç–∞–µ–º"""
    
    @classmethod
    def get_schedule_html(cls) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç HTML –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        
        Returns:
            HTML —Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        """
        return """
        <div class="work-hours">
            <p><strong>–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ß–µ—Ç–≤–µ—Ä–≥:</strong> 10:00 - 19:00</p>
            <p><strong>–ü—è—Ç–Ω–∏—Ü–∞:</strong> –ù–µ —Ä–∞–±–æ—Ç–∞–µ–º</p>
            <p><strong>–°—É–±–±–æ—Ç–∞:</strong> –ù–µ —Ä–∞–±–æ—Ç–∞–µ–º</p>
        </div>
        """
    
    @classmethod
    def get_day_info(cls, date: datetime.date) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—á–µ–º –¥–Ω–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–Ω–µ
        """
        weekday = date.weekday()
        day_name = cls.DAY_NAMES.get(weekday, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        hours = cls.get_work_hours(date)
        
        if hours is None:
            return f"{day_name}: –ù–µ —Ä–∞–±–æ—Ç–∞–µ–º"
        
        start_hour, end_hour = hours
        if weekday == 4:  # –ü—è—Ç–Ω–∏—Ü–∞
            return f"{day_name}: {start_hour:02d}:00 - {end_hour:02d}:00 (–ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)"
        
        return f"{day_name}: {start_hour:02d}:00 - {end_hour:02d}:00"

