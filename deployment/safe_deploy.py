#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫–∞—Ç–æ–º
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—ç—Ç–∞–ø–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
"""

import os
import sys
import time
import json
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from deployment.backup_and_rollback import BackupAndRollback


class SafeDeployment:
    """–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫–∞—Ç–æ–º"""
    
    def __init__(self):
        self.backup_system = BackupAndRollback()
        self.deployment_log = []
        self.rollback_triggers = {
            'critical_errors': 0,
            'max_errors': 3,
            'response_time_threshold': 5.0,  # —Å–µ–∫—É–Ω–¥—ã
            'error_rate_threshold': 0.1  # 10% –æ—à–∏–±–æ–∫
        }
        
    def log_step(self, step: str, status: str, message: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'step': step,
            'status': status,
            'message': message
        }
        self.deployment_log.append(log_entry)
        
        status_emoji = {
            'start': 'üîÑ',
            'success': '‚úÖ', 
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå',
            'rollback': 'üîô'
        }
        
        print(f"{status_emoji.get(status, '‚Ä¢')} {step}: {message}")
    
    def pre_deployment_checks(self) -> Tuple[bool, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º"""
        self.log_step("Pre-deployment checks", "start")
        
        issues = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞
        try:
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True)
            if result.stdout.strip():
                issues.append("–ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git")
        except:
            issues.append("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Git")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ Django
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'smart_secretary.settings')
            import django
            django.setup()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            from django.core.management import execute_from_command_line
            from django.conf import settings
            
            if not settings.configured:
                issues.append("Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Django: {str(e)}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        try:
            import core.validators
            import core.forms
            import core.models
        except ImportError as e:
            issues.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {str(e)}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            from django.db import connection
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}")
        
        if issues:
            self.log_step("Pre-deployment checks", "error", 
                         f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
            for issue in issues:
                print(f"  ‚ùå {issue}")
            return False, issues
        else:
            self.log_step("Pre-deployment checks", "success", "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
            return True, []
    
    def create_deployment_backup(self) -> Tuple[bool, str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º"""
        self.log_step("Creating backup", "start")
        
        success, message = self.backup_system.create_full_backup()
        
        if success:
            self.log_step("Creating backup", "success", message)
            self.backup_name = self.backup_system.backup_name
        else:
            self.log_step("Creating backup", "error", message)
        
        return success, message
    
    def deploy_validation_system(self) -> Tuple[bool, str]:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ —ç—Ç–∞–ø–∞–º"""
        self.log_step("Deploying validation system", "start")
        
        try:
            # –≠—Ç–∞–ø 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
            step1_success = self._deploy_validators()
            if not step1_success:
                return False, "–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 1: –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞ 1
            if not self._health_check_after_step("validators"):
                return False, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞ 1"
            
            # –≠—Ç–∞–ø 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º
            step2_success = self._deploy_forms()
            if not step2_success:
                return False, "–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 2: —Ñ–æ—Ä–º—ã"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞ 2
            if not self._health_check_after_step("forms"):
                return False, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞ 2"
            
            # –≠—Ç–∞–ø 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∫–∏
            step3_success = self._deploy_admin_enhancements()
            if not step3_success:
                return False, "–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 3: –∞–¥–º–∏–Ω–∫–∞"
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not self._final_health_check():
                return False, "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
            
            self.log_step("Deploying validation system", "success", 
                         "–í—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True, "–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ —É—Å–ø–µ—à–Ω–æ"
            
        except Exception as e:
            self.log_step("Deploying validation system", "error", str(e))
            return False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {str(e)}"
    
    def _deploy_validators(self) -> bool:
        """–≠—Ç–∞–ø 1: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤"""
        self.log_step("Stage 1: Validators", "start")
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—É—â–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç
            from core.validators import ValidationManager
            validator = ValidationManager()
            
            # –¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            test_result = validator.validate_appointment_data(
                name="–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤",
                phone="+972501234567", 
                service_name="–ú–∞—Å—Å–∞–∂",
                specialist_name="–ê–≤—Ä–∞–∞–º",
                date="2025-10-22",
                time="15:00"
            )
            
            if not isinstance(test_result, dict):
                return False
            
            self.log_step("Stage 1: Validators", "success", "–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            self.log_step("Stage 1: Validators", "error", str(e))
            return False
    
    def _deploy_forms(self) -> bool:
        """–≠—Ç–∞–ø 2: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º"""
        self.log_step("Stage 2: Forms", "start")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç
            from core.forms import AppointmentForm
            form = AppointmentForm()
            
            if not hasattr(form, 'clean_preferred_date'):
                return False
            
            self.log_step("Stage 2: Forms", "success", "–§–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            self.log_step("Stage 2: Forms", "error", str(e))
            return False
    
    def _deploy_admin_enhancements(self) -> bool:
        """–≠—Ç–∞–ø 3: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–∫–∏"""
        self.log_step("Stage 3: Admin", "start")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥–º–∏–Ω–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            from core.admin import AppointmentAdmin
            from core.models import Appointment
            
            admin = AppointmentAdmin(Appointment, None)
            
            if not hasattr(admin, 'colored_status'):
                return False
            
            self.log_step("Stage 3: Admin", "success", "–ê–¥–º–∏–Ω–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            self.log_step("Stage 3: Admin", "error", str(e))
            return False
    
    def _health_check_after_step(self, step_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞"""
        self.log_step(f"Health check after {step_name}", "start")
        
        checks = self.backup_system.health_check()
        all_good = all(checks.values())
        
        if all_good:
            self.log_step(f"Health check after {step_name}", "success", 
                         "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
        else:
            failed_checks = [k for k, v in checks.items() if not v]
            self.log_step(f"Health check after {step_name}", "error", 
                         f"–ù–µ—É–¥–∞—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {failed_checks}")
        
        return all_good
    
    def _final_health_check(self) -> bool:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        self.log_step("Final health check", "start")
        
        try:
            # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            checks = {
                'database': False,
                'models': False,
                'validators': False,
                'forms': False,
                'admin': False,
                'ai_chat': False
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
            try:
                from django.db import connection
                with connection.cursor() as cursor:
                    cursor.execute("SELECT COUNT(*) FROM core_patient")
                checks['database'] = True
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
            try:
                from core.models import Patient, Appointment
                Patient.objects.count()
                Appointment.objects.count()
                checks['models'] = True
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
            try:
                from core.validators import ValidationManager
                validator = ValidationManager()
                checks['validators'] = True
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º
            try:
                from core.forms import AppointmentForm
                form = AppointmentForm()
                checks['forms'] = True
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∫–∏
            try:
                from core.admin import AppointmentAdmin
                checks['admin'] = True
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò-—á–∞—Ç–∞
            try:
                from core.lite_secretary import LiteSmartSecretary
                secretary = LiteSmartSecretary()
                checks['ai_chat'] = True
            except:
                pass
            
            success_count = sum(checks.values())
            total_count = len(checks)
            
            if success_count == total_count:
                self.log_step("Final health check", "success", 
                             f"–í—Å–µ {total_count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
                return True
            else:
                failed = [k for k, v in checks.items() if not v]
                self.log_step("Final health check", "error", 
                             f"–ù–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {failed}")
                return False
                
        except Exception as e:
            self.log_step("Final health check", "error", str(e))
            return False
    
    def automatic_rollback(self, reason: str) -> Tuple[bool, str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö"""
        self.log_step("Automatic rollback", "rollback", f"–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        if hasattr(self, 'backup_name'):
            success, message = self.backup_system.rollback_from_backup(self.backup_name)
            
            if success:
                self.log_step("Automatic rollback", "success", 
                             "–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞")
            else:
                self.log_step("Automatic rollback", "error", 
                             f"–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {message}")
            
            return success, message
        else:
            return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞"
    
    def save_deployment_log(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        log_dir = Path(__file__).parent.parent / 'logs'
        log_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        log_file = log_dir / f'deployment_{timestamp}.json'
        
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(self.deployment_log, f, indent=2, ensure_ascii=False)
        
        print(f"üìã –õ–æ–≥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {log_file}")
    
    def full_deployment_cycle(self) -> Tuple[bool, str]:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        print("=" * 60)
        
        try:
            # 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            pre_check_success, issues = self.pre_deployment_checks()
            if not pre_check_success:
                return False, f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {issues}"
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
            backup_success, backup_message = self.create_deployment_backup()
            if not backup_success:
                return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: {backup_message}"
            
            # 3. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            deploy_success, deploy_message = self.deploy_validation_system()
            if not deploy_success:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                rollback_success, rollback_message = self.automatic_rollback(deploy_message)
                if rollback_success:
                    return False, f"–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç: {deploy_message}"
                else:
                    return False, f"–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–∫–∞—Ç —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {rollback_message}"
            
            # 4. –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            time.sleep(2)  # –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
            final_check = self._final_health_check()
            if not final_check:
                rollback_success, rollback_message = self.automatic_rollback("–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
                if rollback_success:
                    return False, "–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç"
                else:
                    return False, f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –æ—Ç–∫–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è: {rollback_message}"
            
            print("=" * 60)
            print("üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return True, "–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            
        except Exception as e:
            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –æ—Ç–∫–∞—Ç –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            try:
                self.automatic_rollback(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            except:
                pass
            
            return False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {str(e)}"
        
        finally:
            # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            self.save_deployment_log()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
    parser.add_argument('--dry-run', action='store_true', 
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∏, –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è')
    parser.add_argument('--force', action='store_true',
                       help='–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    deployment = SafeDeployment()
    
    if args.dry_run:
        print("üîç –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ (dry-run)")
        success, issues = deployment.pre_deployment_checks()
        if success:
            print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")
            sys.exit(0)
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            sys.exit(1)
    else:
        success, message = deployment.full_deployment_cycle()
        print(f"\n{'‚úÖ' if success else '‚ùå'} {message}")
        sys.exit(0 if success else 1)


if __name__ == '__main__':
    main()
