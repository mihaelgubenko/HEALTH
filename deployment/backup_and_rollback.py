#!/usr/bin/env python
"""
–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ –æ—Ç–∫–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ HEALTH
–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –±—ç–∫–∞–ø—ã –ø–µ—Ä–µ–¥ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è
"""

import os
import sys
import json
import shutil
import sqlite3
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'smart_secretary.settings')

import django
django.setup()

from django.conf import settings
from django.core.management import call_command
from django.db import connection


class BackupAndRollback:
    """–°–∏—Å—Ç–µ–º–∞ –±—ç–∫–∞–ø–∞ –∏ –æ—Ç–∫–∞—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.backup_dir = self.project_root / 'backups'
        self.backup_dir.mkdir(exist_ok=True)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –±—ç–∫–∞–ø–∞
        self.critical_files = [
            'core/validators.py',
            'core/forms.py', 
            'core/models.py',
            'core/admin.py',
            'core/views.py',
            'core/lite_secretary.py',
            'smart_secretary/settings.py',
            'requirements.txt'
        ]
        
        self.timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.backup_name = f"backup_{self.timestamp}"
        self.backup_path = self.backup_dir / self.backup_name
        
    def create_full_backup(self) -> Tuple[bool, str]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞: {self.backup_name}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–∞
            self.backup_path.mkdir(exist_ok=True)
            
            # 1. –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_backup_success, db_message = self._backup_database()
            if not db_backup_success:
                return False, f"–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ –ë–î: {db_message}"
            
            # 2. –ë—ç–∫–∞–ø –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
            files_backup_success, files_message = self._backup_files()
            if not files_backup_success:
                return False, f"–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ —Ñ–∞–π–ª–æ–≤: {files_message}"
            
            # 3. –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_backup_success, config_message = self._backup_configuration()
            if not config_backup_success:
                return False, f"–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_message}"
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –±—ç–∫–∞–ø–∞
            manifest_success, manifest_message = self._create_backup_manifest()
            if not manifest_success:
                return False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {manifest_message}"
            
            print(f"‚úÖ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {self.backup_path}")
            return True, f"–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {self.backup_name}"
            
        except Exception as e:
            return False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {str(e)}"
    
    def _backup_database(self) -> Tuple[bool, str]:
        """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db_backup_path = self.backup_path / 'database'
            db_backup_path.mkdir(exist_ok=True)
            
            # –î–ª—è SQLite
            if 'sqlite' in settings.DATABASES['default']['ENGINE']:
                db_path = settings.DATABASES['default']['NAME']
                if os.path.exists(db_path):
                    shutil.copy2(db_path, db_backup_path / 'db.sqlite3')
                    print("  üìÅ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –î–ª—è PostgreSQL (Railway)
            elif 'postgresql' in settings.DATABASES['default']['ENGINE']:
                # –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø —á–µ—Ä–µ–∑ Django
                dump_path = db_backup_path / 'db_dump.json'
                with open(dump_path, 'w', encoding='utf-8') as f:
                    call_command('dumpdata', stdout=f, indent=2)
                print("  üìÅ PostgreSQL –¥–∞–º–ø —Å–æ–∑–¥–∞–Ω")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º JSON –¥–∞–º–ø –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            json_dump_path = db_backup_path / 'full_data_dump.json'
            with open(json_dump_path, 'w', encoding='utf-8') as f:
                call_command('dumpdata', stdout=f, indent=2, 
                           exclude=['contenttypes', 'auth.permission'])
            
            return True, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
            
        except Exception as e:
            return False, str(e)
    
    def _backup_files(self) -> Tuple[bool, str]:
        """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            files_backup_path = self.backup_path / 'files'
            files_backup_path.mkdir(exist_ok=True)
            
            backed_up_files = []
            
            for file_path in self.critical_files:
                source_path = self.project_root / file_path
                if source_path.exists():
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                    dest_path = files_backup_path / file_path
                    dest_path.parent.mkdir(parents=True, exist_ok=True)
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                    shutil.copy2(source_path, dest_path)
                    backed_up_files.append(file_path)
            
            print(f"  üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(backed_up_files)}")
            return True, f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(backed_up_files)} —Ñ–∞–π–ª–æ–≤"
            
        except Exception as e:
            return False, str(e)
    
    def _backup_configuration(self) -> Tuple[bool, str]:
        """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_backup_path = self.backup_path / 'config'
            config_backup_path.mkdir(exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
            config = {
                'DEBUG': settings.DEBUG,
                'ALLOWED_HOSTS': settings.ALLOWED_HOSTS,
                'TIME_ZONE': settings.TIME_ZONE,
                'USE_TZ': settings.USE_TZ,
                'DATABASES': {
                    'ENGINE': settings.DATABASES['default']['ENGINE'],
                    'NAME': settings.DATABASES['default']['NAME']
                },
                'INSTALLED_APPS': settings.INSTALLED_APPS,
                'MIDDLEWARE': settings.MIDDLEWARE,
            }
            
            config_file = config_backup_path / 'django_settings.json'
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, default=str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env_vars = {
                'DJANGO_SETTINGS_MODULE': os.environ.get('DJANGO_SETTINGS_MODULE'),
                'DATABASE_URL': os.environ.get('DATABASE_URL', ''),
                'SECRET_KEY': os.environ.get('SECRET_KEY', ''),
            }
            
            env_file = config_backup_path / 'environment.json'
            with open(env_file, 'w', encoding='utf-8') as f:
                json.dump(env_vars, f, indent=2)
            
            print("  üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return True, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
            
        except Exception as e:
            return False, str(e)
    
    def _create_backup_manifest(self) -> Tuple[bool, str]:
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç –±—ç–∫–∞–ø–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        try:
            manifest = {
                'backup_name': self.backup_name,
                'timestamp': self.timestamp,
                'created_at': datetime.now().isoformat(),
                'project_root': str(self.project_root),
                'python_version': sys.version,
                'django_version': django.get_version(),
                'critical_files': self.critical_files,
                'backup_type': 'full',
                'description': '–ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                'rollback_instructions': [
                    '1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä',
                    '2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ backup/files/',
                    '3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ backup/database/',
                    '4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä',
                    '5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å'
                ]
            }
            
            manifest_file = self.backup_path / 'manifest.json'
            with open(manifest_file, 'w', encoding='utf-8') as f:
                json.dump(manifest, f, indent=2, ensure_ascii=False)
            
            print("  üìÅ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω")
            return True, "–ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω"
            
        except Exception as e:
            return False, str(e)
    
    def list_backups(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
        backups = []
        
        for backup_dir in self.backup_dir.glob('backup_*'):
            if backup_dir.is_dir():
                manifest_file = backup_dir / 'manifest.json'
                if manifest_file.exists():
                    try:
                        with open(manifest_file, 'r', encoding='utf-8') as f:
                            manifest = json.load(f)
                        backups.append({
                            'name': manifest['backup_name'],
                            'created_at': manifest['created_at'],
                            'description': manifest.get('description', ''),
                            'path': str(backup_dir)
                        })
                    except:
                        # –ï—Å–ª–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        backups.append({
                            'name': backup_dir.name,
                            'created_at': 'unknown',
                            'description': '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç',
                            'path': str(backup_dir)
                        })
        
        return sorted(backups, key=lambda x: x['created_at'], reverse=True)
    
    def rollback_from_backup(self, backup_name: str) -> Tuple[bool, str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–∫–∞—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞"""
        try:
            backup_path = self.backup_dir / backup_name
            if not backup_path.exists():
                return False, f"–ë—ç–∫–∞–ø {backup_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–∞—Ç –∏–∑ –±—ç–∫–∞–ø–∞: {backup_name}")
            
            # 1. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
            files_success, files_message = self._restore_files(backup_path)
            if not files_success:
                return False, f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {files_message}"
            
            # 2. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_success, db_message = self._restore_database(backup_path)
            if not db_success:
                return False, f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {db_message}"
            
            print(f"‚úÖ –û—Ç–∫–∞—Ç –∏–∑ –±—ç–∫–∞–ø–∞ {backup_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True, f"–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞ {backup_name}"
            
        except Exception as e:
            return False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ: {str(e)}"
    
    def _restore_files(self, backup_path: Path) -> Tuple[bool, str]:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –±—ç–∫–∞–ø–∞"""
        try:
            files_backup_path = backup_path / 'files'
            if not files_backup_path.exists():
                return False, "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±—ç–∫–∞–ø–µ"
            
            restored_files = []
            
            for file_path in self.critical_files:
                backup_file = files_backup_path / file_path
                if backup_file.exists():
                    target_file = self.project_root / file_path
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    target_file.parent.mkdir(parents=True, exist_ok=True)
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    shutil.copy2(backup_file, target_file)
                    restored_files.append(file_path)
            
            print(f"  üìÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(restored_files)}")
            return True, f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(restored_files)} —Ñ–∞–π–ª–æ–≤"
            
        except Exception as e:
            return False, str(e)
    
    def _restore_database(self, backup_path: Path) -> Tuple[bool, str]:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞"""
        try:
            db_backup_path = backup_path / 'database'
            if not db_backup_path.exists():
                return False, "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±—ç–∫–∞–ø–µ"
            
            # –î–ª—è SQLite
            if 'sqlite' in settings.DATABASES['default']['ENGINE']:
                backup_db = db_backup_path / 'db.sqlite3'
                if backup_db.exists():
                    target_db = settings.DATABASES['default']['NAME']
                    shutil.copy2(backup_db, target_db)
                    print("  üìÅ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –î–ª—è PostgreSQL - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ JSON –¥–∞–º–ø–∞
            json_dump = db_backup_path / 'full_data_dump.json'
            if json_dump.exists():
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
                call_command('flush', '--noinput')
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∞–º–ø–∞
                call_command('loaddata', str(json_dump))
                print("  üìÅ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ JSON –¥–∞–º–ø–∞")
            
            return True, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            
        except Exception as e:
            return False, str(e)
    
    def quick_rollback(self) -> Tuple[bool, str]:
        """–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–∞—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±—ç–∫–∞–ø—É"""
        backups = self.list_backups()
        if not backups:
            return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –æ—Ç–∫–∞—Ç–∞"
        
        latest_backup = backups[0]
        return self.rollback_from_backup(latest_backup['name'])
    
    def health_check(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        checks = {}
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                checks['database'] = True
        except:
            checks['database'] = False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
            from core.models import Patient, Appointment, Service, Specialist
            from core.validators import ValidationManager
            from core.forms import AppointmentForm
            checks['imports'] = True
        except:
            checks['imports'] = False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ (—Ç–µ—Å—Ç)
            from core.models import Patient
            test_patient = Patient.objects.filter(phone='+972000000000').first()
            checks['models'] = True
        except:
            checks['models'] = False
        
        return checks


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–°–∏—Å—Ç–µ–º–∞ –±—ç–∫–∞–ø–∞ –∏ –æ—Ç–∫–∞—Ç–∞')
    parser.add_argument('action', choices=['backup', 'rollback', 'list', 'health'], 
                       help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--backup-name', help='–ò–º—è –±—ç–∫–∞–ø–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞')
    
    args = parser.parse_args()
    
    backup_system = BackupAndRollback()
    
    if args.action == 'backup':
        success, message = backup_system.create_full_backup()
        print(f"{'‚úÖ' if success else '‚ùå'} {message}")
        sys.exit(0 if success else 1)
    
    elif args.action == 'rollback':
        if args.backup_name:
            success, message = backup_system.rollback_from_backup(args.backup_name)
        else:
            success, message = backup_system.quick_rollback()
        print(f"{'‚úÖ' if success else '‚ùå'} {message}")
        sys.exit(0 if success else 1)
    
    elif args.action == 'list':
        backups = backup_system.list_backups()
        if backups:
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:")
            for backup in backups:
                print(f"  ‚Ä¢ {backup['name']} - {backup['created_at']}")
                print(f"    {backup['description']}")
        else:
            print("üìã –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    elif args.action == 'health':
        checks = backup_system.health_check()
        print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:")
        for check, status in checks.items():
            print(f"  {'‚úÖ' if status else '‚ùå'} {check}")
        
        all_good = all(checks.values())
        sys.exit(0 if all_good else 1)


if __name__ == '__main__':
    main()
