#!/usr/bin/env python
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞
–í–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã, —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –∏ —Ç–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
"""

import os
import sys
import json
import time
import random
import threading
from datetime import datetime, timedelta, date
from pathlib import Path
from typing import Dict, List, Any, Tuple
import concurrent.futures

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'smart_secretary.settings')

import django
django.setup()

from django.test import TestCase, TransactionTestCase
from django.utils import timezone
from django.db import transaction, IntegrityError
from django.contrib.auth.models import User
from django.test.client import Client
from django.urls import reverse

from core.models import Patient, Specialist, Service, Appointment, ContactMessage
from core.validators import ValidationManager, NameValidator, PhoneValidator
from core.datetime_validator import DateTimeValidator, TimezoneManager
from core.lite_secretary import LiteSmartSecretary
from core.forms import AppointmentForm


class ValidationTestSuite:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'tests': {},
            'summary': {
                'total': 0,
                'passed': 0,
                'failed': 0,
                'errors': 0
            }
        }
    
    def run_test(self, test_name: str, test_func, *args, **kwargs):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        print(f"üß™ –¢–µ—Å—Ç: {test_name}")
        
        start_time = time.time()
        try:
            result = test_func(*args, **kwargs)
            execution_time = time.time() - start_time
            
            self.results['tests'][test_name] = {
                'status': 'PASSED',
                'result': result,
                'execution_time': execution_time,
                'error': None
            }
            self.results['summary']['passed'] += 1
            print(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω ({execution_time:.3f}s)")
            
        except AssertionError as e:
            execution_time = time.time() - start_time
            self.results['tests'][test_name] = {
                'status': 'FAILED',
                'result': None,
                'execution_time': execution_time,
                'error': str(e)
            }
            self.results['summary']['failed'] += 1
            print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω: {str(e)} ({execution_time:.3f}s)")
            
        except Exception as e:
            execution_time = time.time() - start_time
            self.results['tests'][test_name] = {
                'status': 'ERROR',
                'result': None,
                'execution_time': execution_time,
                'error': str(e)
            }
            self.results['summary']['errors'] += 1
            print(f"  üí• –û—à–∏–±–∫–∞: {str(e)} ({execution_time:.3f}s)")
        
        self.results['summary']['total'] += 1
    
    def test_name_validation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω"""
        test_cases = [
            # (input, expected_valid, description)
            ("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –∏–º—è"),
            ("John Smith", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è"),
            ("◊ê◊ë◊®◊î◊ù ◊õ◊î◊ü", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –Ω–∞ –∏–≤—Ä–∏—Ç–µ"),
            ("Ivan123", False, "–ò–º—è —Å —Ü–∏—Ñ—Ä–∞–º–∏"),
            ("—Ç–µ—Å—Ç", False, "–°–ª—É–∂–µ–±–Ω–æ–µ —Å–ª–æ–≤–æ"),
            ("admin", False, "–°–ª—É–∂–µ–±–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"),
            ("–∞–∞–∞", False, "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã"),
            ("qwerty", False, "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"),
            ("–ò", False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ"),
            ("–ê" * 60, False, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"),
            ("–ò–≤–∞–Ω John", False, "–°–º–µ—à–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏"),
            ("O'Connor", True, "–ò–º—è —Å –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–º"),
            ("–ú–∞—Ä–∏—è-–ê–Ω–Ω–∞", True, "–ò–º—è —Å –¥–µ—Ñ–∏—Å–æ–º"),
        ]
        
        passed = 0
        for name, expected, description in test_cases:
            is_valid, error = NameValidator.validate_name(name)
            if is_valid == expected:
                passed += 1
            else:
                print(f"    ‚ùå {description}: '{name}' -> {is_valid} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
        
        assert passed == len(test_cases), f"–ü—Ä–æ–π–¥–µ–Ω–æ {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω"
        return {'passed': passed, 'total': len(test_cases)}
    
    def test_phone_validation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
        test_cases = [
            # (input, expected_valid, expected_country, description)
            ("+972501234567", True, "IL", "–ò–∑—Ä–∞–∏–ª—å—Å–∫–∏–π –º–æ–±–∏–ª—å–Ω—ã–π"),
            ("0501234567", True, "IL", "–ò–∑—Ä–∞–∏–ª—å—Å–∫–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π"),
            ("501234567", True, "IL", "–ò–∑—Ä–∞–∏–ª—å—Å–∫–∏–π –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞"),
            ("+79123456789", True, "RU", "–†–æ—Å—Å–∏–π—Å–∫–∏–π –º–æ–±–∏–ª—å–Ω—ã–π"),
            ("89123456789", True, "RU", "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å 8"),
            ("+380501234567", True, "UA", "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π –º–æ–±–∏–ª—å–Ω—ã–π"),
            ("+12345678901", True, "US", "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä"),
            ("123", False, "UNKNOWN", "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"),
            ("+972123", False, "IL", "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –ò–∑—Ä–∞–∏–ª—è"),
            ("invalid", False, "UNKNOWN", "–ù–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
        ]
        
        passed = 0
        for phone, expected_valid, expected_country, description in test_cases:
            is_valid, country, result = PhoneValidator.validate_phone(phone)
            if is_valid == expected_valid and (not expected_valid or country == expected_country):
                passed += 1
            else:
                print(f"    ‚ùå {description}: '{phone}' -> {is_valid}, {country} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_valid}, {expected_country})")
        
        assert passed == len(test_cases), f"–ü—Ä–æ–π–¥–µ–Ω–æ {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"
        return {'passed': passed, 'total': len(test_cases)}
    
    def test_datetime_validation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        validator = DateTimeValidator()
        
        # –¢–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç
        date_tests = [
            ("2025-10-22", True, "ISO —Ñ–æ—Ä–º–∞—Ç"),
            ("22.10.2025", True, "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç"),
            ("—Å–µ–≥–æ–¥–Ω—è", True, "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞"),
            ("–∑–∞–≤—Ç—Ä–∞", True, "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞"),
            ("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", True, "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"),
            ("invalid", False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"),
        ]
        
        passed = 0
        for date_str, expected, description in date_tests:
            success, parsed_date, error = validator.parse_date_string(date_str)
            if success == expected:
                passed += 1
            else:
                print(f"    ‚ùå {description}: '{date_str}' -> {success} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
        
        # –¢–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
        time_tests = [
            ("15:30", True, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"),
            ("9:00", True, "–£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è"),
            ("25:00", False, "–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è"),
            ("abc", False, "–ù–µ –≤—Ä–µ–º—è"),
        ]
        
        for time_str, expected, description in time_tests:
            success, parsed_time, error = validator.parse_time_string(time_str)
            if success == expected:
                passed += 1
            else:
                print(f"    ‚ùå {description}: '{time_str}' -> {success} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
        
        total_tests = len(date_tests) + len(time_tests)
        assert passed == total_tests, f"–ü—Ä–æ–π–¥–µ–Ω–æ {passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏"
        return {'passed': passed, 'total': total_tests}
    
    def test_appointment_validation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        specialist = Specialist.objects.create(
            name="–¢–µ—Å—Ç–æ–≤—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            specialty="–ú–∞—Å—Å–∞–∂",
            is_active=True
        )
        
        service = Service.objects.create(
            name="–¢–µ—Å—Ç–æ–≤–∞—è –£—Å–ª—É–≥–∞",
            price=100,
            duration=60,
            is_active=True
        )
        
        validator = ValidationManager()
        
        # –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        tomorrow = (timezone.now() + timedelta(days=1)).date().strftime('%Y-%m-%d')
        
        result = validator.validate_appointment_data(
            name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            phone="+972501234567",
            service_name="–¢–µ—Å—Ç–æ–≤–∞—è –£—Å–ª—É–≥–∞",
            specialist_name="–¢–µ—Å—Ç–æ–≤—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            date=tomorrow,
            time_str="15:00"
        )
        
        assert result['is_valid'], f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å: {result['errors']}"
        
        # –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        result = validator.validate_appointment_data(
            name="—Ç–µ—Å—Ç",  # –°–ª—É–∂–µ–±–Ω–æ–µ —Å–ª–æ–≤–æ
            phone="123",  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
            service_name="–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –£—Å–ª—É–≥–∞",
            specialist_name="–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            date="2020-01-01",  # –ü—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞
            time_str="25:00"  # –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        )
        
        assert not result['is_valid'], "–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è"
        assert len(result['errors']) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
        
        return {'valid_passed': True, 'invalid_passed': True}


class DatabaseTestSuite:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.results = {}
    
    def test_model_creation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        patient = Patient.objects.create(
            name="–¢–µ—Å—Ç –ü–∞—Ü–∏–µ–Ω—Ç",
            phone="+972501234567",
            email="test@example.com"
        )
        assert patient.id is not None, "–ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        specialist = Specialist.objects.create(
            name="–¢–µ—Å—Ç –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            specialty="–¢–µ—Å—Ç–æ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
        )
        assert specialist.id is not None, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
        service = Service.objects.create(
            name="–¢–µ—Å—Ç –£—Å–ª—É–≥–∞",
            price=100,
            duration=60
        )
        assert service.id is not None, "–£—Å–ª—É–≥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        appointment_time = timezone.now() + timedelta(days=1)
        appointment = Appointment.objects.create(
            patient=patient,
            specialist=specialist,
            service=service,
            start_time=appointment_time,
            end_time=appointment_time + timedelta(minutes=service.duration)
        )
        assert appointment.id is not None, "–ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"
        
        return {
            'patient_id': patient.id,
            'specialist_id': specialist.id,
            'service_id': service.id,
            'appointment_id': appointment.id
        }
    
    def test_model_relationships(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        patient = Patient.objects.first()
        specialist = Specialist.objects.first()
        service = Service.objects.first()
        
        assert patient is not None, "–ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        assert specialist is not None, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        assert service is not None, "–£—Å–ª—É–≥–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
        appointments = Appointment.objects.filter(patient=patient)
        assert appointments.exists(), "–£ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∏"
        
        appointment = appointments.first()
        assert appointment.specialist == specialist, "–°–≤—è–∑—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å"
        assert appointment.service == service, "–°–≤—è–∑—å —Å —É—Å–ª—É–≥–æ–π –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å"
        
        return {'relationships_ok': True}
    
    def test_data_integrity(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # –¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
        patient_count_before = Patient.objects.count()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
        unique_phone = f"+972{random.randint(500000000, 599999999)}"
        Patient.objects.create(
            name="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ü–∞—Ü–∏–µ–Ω—Ç",
            phone=unique_phone
        )
        
        patient_count_after = Patient.objects.count()
        assert patient_count_after == patient_count_before + 1, "–ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        
        return {'integrity_ok': True}


class IntegrationTestSuite:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def __init__(self):
        self.client = Client()
        self.results = {}
    
    def test_web_interface(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        response = self.client.get('/')
        assert response.status_code == 200, "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ª—É–≥
        response = self.client.get('/services/')
        assert response.status_code == 200, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ª—É–≥ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏
        response = self.client.get('/appointment/')
        assert response.status_code == 200, "–§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è"
        
        return {'pages_loaded': 3}
    
    def test_appointment_form_submission(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        specialist = Specialist.objects.create(
            name="–§–æ—Ä–º–∞ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            specialty="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            is_active=True
        )
        
        service = Service.objects.create(
            name="–§–æ—Ä–º–∞ –£—Å–ª—É–≥–∞",
            price=150,
            duration=60,
            is_active=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        tomorrow = (timezone.now() + timedelta(days=1)).date()
        
        form_data = {
            'name': '–¢–µ—Å—Ç –§–æ—Ä–º–∞',
            'phone': '+972501234567',
            'email': 'test@example.com',
            'service': service.id,
            'specialist': specialist.id,
            'preferred_date': tomorrow.strftime('%Y-%m-%d'),
            'preferred_time': '15:00',
            'notes': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å'
        }
        
        response = self.client.post('/appointment/', form_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–ª–∏ —É—Å–ø–µ—Ö)
        assert response.status_code in [200, 302], f"–§–æ—Ä–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ª—É—á–µ–Ω –∫–æ–¥: {response.status_code}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–ª–∞—Å—å
        appointments = Appointment.objects.filter(
            patient__name='–¢–µ—Å—Ç –§–æ—Ä–º–∞',
            patient__phone='+972501234567'
        )
        
        assert appointments.exists(), "–ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É"
        
        return {'form_submitted': True, 'appointment_created': True}
    
    def test_ai_chat_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ò–ò-—á–∞—Ç–æ–º"""
        try:
            secretary = LiteSmartSecretary()
            
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            response = secretary.process_message(
                "–ü—Ä–∏–≤–µ—Ç", 
                session_id="test_session"
            )
            
            assert 'response' in response, "–ò–ò –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
            assert response['response'], "–û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            
            return {'ai_responding': True}
            
        except Exception as e:
            # –ò–ò –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
            return {'ai_responding': False, 'error': str(e)}


class StressTestSuite:
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    def __init__(self):
        self.results = {}
    
    def test_concurrent_appointments(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        specialist = Specialist.objects.create(
            name="–°—Ç—Ä–µ—Å—Å –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            specialty="–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            is_active=True
        )
        
        service = Service.objects.create(
            name="–°—Ç—Ä–µ—Å—Å –£—Å–ª—É–≥–∞",
            price=200,
            duration=30,
            is_active=True
        )
        
        def create_appointment(i):
            """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
            try:
                patient = Patient.objects.create(
                    name=f"–°—Ç—Ä–µ—Å—Å –ü–∞—Ü–∏–µ–Ω—Ç {i}",
                    phone=f"+97250{i:07d}"
                )
                
                appointment_time = timezone.now() + timedelta(days=1, minutes=i*30)
                
                appointment = Appointment.objects.create(
                    patient=patient,
                    specialist=specialist,
                    service=service,
                    start_time=appointment_time,
                    end_time=appointment_time + timedelta(minutes=30)
                )
                
                return True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ {i}: {e}")
                return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(create_appointment, i) for i in range(10)]
            results = [future.result() for future in concurrent.futures.as_completed(futures)]
        
        successful = sum(results)
        assert successful >= 8, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ –º–∏–Ω–∏–º—É–º 8 –∏–∑ 10 –∑–∞–ø–∏—Å–µ–π, —Å–æ–∑–¥–∞–Ω–æ: {successful}"
        
        return {'successful_appointments': successful, 'total_attempted': 10}
    
    def test_validation_performance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        validator = ValidationManager()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º 100 –≤–∞–ª–∏–¥–∞—Ü–∏–π
        start_time = time.time()
        
        for i in range(100):
            validator.validate_appointment_data(
                name=f"–¢–µ—Å—Ç {i}",
                phone=f"+97250{i:07d}",
                service_name="–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —É—Å–ª—É–≥–∞",
                specialist_name="–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                date="2025-12-31",
                time_str="15:00"
            )
        
        end_time = time.time()
        total_time = end_time - start_time
        avg_time = total_time / 100
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π (–º–µ–Ω–µ–µ 50–º—Å –Ω–∞ –∑–∞–ø—Ä–æ—Å)
        assert avg_time < 0.05, f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è: {avg_time:.3f}s –Ω–∞ –∑–∞–ø—Ä–æ—Å"
        
        return {'total_time': total_time, 'avg_time': avg_time, 'validations': 100}


class BoundaryTestSuite:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    
    def __init__(self):
        self.results = {}
    
    def test_edge_cases(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        validator = ValidationManager()
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        tomorrow = (timezone.now() + timedelta(days=1)).date().strftime('%Y-%m-%d')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        specialist = Specialist.objects.create(
            name="–ì—Ä–∞–Ω–∏—á–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            specialty="–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏",
            is_active=True
        )
        
        service = Service.objects.create(
            name="–ì—Ä–∞–Ω–∏—á–Ω–∞—è –£—Å–ª—É–≥–∞",
            price=300,
            duration=60,
            is_active=True
        )
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ 9:00 (–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è)
        result = validator.validate_appointment_data(
            name="–ì—Ä–∞–Ω–∏—á–Ω—ã–π –¢–µ—Å—Ç",
            phone="+972501234567",
            service_name="–ì—Ä–∞–Ω–∏—á–Ω–∞—è –£—Å–ª—É–≥–∞",
            specialist_name="–ì—Ä–∞–Ω–∏—á–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            date=tomorrow,
            time_str="09:00"
        )
        
        morning_valid = result['is_valid']
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ 18:00 (–∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è)
        result = validator.validate_appointment_data(
            name="–ì—Ä–∞–Ω–∏—á–Ω—ã–π –¢–µ—Å—Ç",
            phone="+972501234567",
            service_name="–ì—Ä–∞–Ω–∏—á–Ω–∞—è –£—Å–ª—É–≥–∞",
            specialist_name="–ì—Ä–∞–Ω–∏—á–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            date=tomorrow,
            time_str="18:00"
        )
        
        evening_valid = result['is_valid']
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ 8:00 (–¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã)
        result = validator.validate_appointment_data(
            name="–ì—Ä–∞–Ω–∏—á–Ω—ã–π –¢–µ—Å—Ç",
            phone="+972501234567",
            service_name="–ì—Ä–∞–Ω–∏—á–Ω–∞—è –£—Å–ª—É–≥–∞",
            specialist_name="–ì—Ä–∞–Ω–∏—á–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            date=tomorrow,
            time_str="08:00"
        )
        
        early_invalid = not result['is_valid']
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ 20:00 (–ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã)
        result = validator.validate_appointment_data(
            name="–ì—Ä–∞–Ω–∏—á–Ω—ã–π –¢–µ—Å—Ç",
            phone="+972501234567",
            service_name="–ì—Ä–∞–Ω–∏—á–Ω–∞—è –£—Å–ª—É–≥–∞",
            specialist_name="–ì—Ä–∞–Ω–∏—á–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            date=tomorrow,
            time_str="20:00"
        )
        
        late_invalid = not result['is_valid']
        
        assert morning_valid, "–ó–∞–ø–∏—Å—å –≤ 9:00 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π"
        assert evening_valid, "–ó–∞–ø–∏—Å—å –≤ 18:00 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π"
        assert early_invalid, "–ó–∞–ø–∏—Å—å –≤ 8:00 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π"
        assert late_invalid, "–ó–∞–ø–∏—Å—å –≤ 20:00 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π"
        
        return {
            'morning_valid': morning_valid,
            'evening_valid': evening_valid,
            'early_invalid': early_invalid,
            'late_invalid': late_invalid
        }
    
    def test_extreme_values(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        # –¢–µ—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –∏–º–µ–Ω
        long_name = "–ê" * 1000
        is_valid, error = NameValidator.validate_name(long_name)
        assert not is_valid, "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
        
        # –¢–µ—Å—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        is_valid, error = NameValidator.validate_name("")
        assert not is_valid, "–ü—É—Å—Ç–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
        
        # –¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
        is_valid, country, result = PhoneValidator.validate_phone("!@#$%^&*()")
        assert not is_valid, "–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
        
        return {'extreme_values_handled': True}


class ComprehensiveTestRunner:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.all_results = {
            'timestamp': datetime.now().isoformat(),
            'suites': {},
            'summary': {
                'total_suites': 0,
                'passed_suites': 0,
                'total_tests': 0,
                'passed_tests': 0,
                'failed_tests': 0,
                'error_tests': 0,
                'execution_time': 0
            }
        }
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("=" * 60)
        
        start_time = time.time()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        print("-" * 30)
        validation_suite = ValidationTestSuite()
        validation_suite.run_test("–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω", validation_suite.test_name_validation)
        validation_suite.run_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤", validation_suite.test_phone_validation)
        validation_suite.run_test("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏", validation_suite.test_datetime_validation)
        validation_suite.run_test("–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π", validation_suite.test_appointment_validation)
        
        self.all_results['suites']['validation'] = validation_suite.results
        
        # –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("-" * 30)
        db_suite = DatabaseTestSuite()
        validation_suite.run_test("–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", db_suite.test_model_creation)
        validation_suite.run_test("–°–≤—è–∑–∏ –º–æ–¥–µ–ª–µ–π", db_suite.test_model_relationships)
        validation_suite.run_test("–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", db_suite.test_data_integrity)
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        print("\nüîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        print("-" * 30)
        integration_suite = IntegrationTestSuite()
        validation_suite.run_test("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", integration_suite.test_web_interface)
        validation_suite.run_test("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã", integration_suite.test_appointment_form_submission)
        validation_suite.run_test("–ò–ò-—á–∞—Ç", integration_suite.test_ai_chat_integration)
        
        # –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã
        print("\n‚ö° –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("-" * 30)
        stress_suite = StressTestSuite()
        validation_suite.run_test("–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏", stress_suite.test_concurrent_appointments)
        validation_suite.run_test("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏", stress_suite.test_validation_performance)
        
        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        print("\nüéØ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏")
        print("-" * 30)
        boundary_suite = BoundaryTestSuite()
        validation_suite.run_test("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", boundary_suite.test_edge_cases)
        validation_suite.run_test("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", boundary_suite.test_extreme_values)
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_time = time.time() - start_time
        
        summary = validation_suite.results['summary']
        self.all_results['summary'] = {
            'total_suites': 5,
            'passed_suites': 5 if summary['failed'] == 0 and summary['errors'] == 0 else 4,
            'total_tests': summary['total'],
            'passed_tests': summary['passed'],
            'failed_tests': summary['failed'],
            'error_tests': summary['errors'],
            'execution_time': total_time
        }
        
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total']}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {summary['passed']} ‚úÖ")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {summary['failed']} ‚ùå")
        print(f"–û—à–∏–±–æ–∫: {summary['errors']} üí•")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f}s")
        
        success_rate = (summary['passed'] / summary['total'] * 100) if summary['total'] > 0 else 0
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if summary['failed'] == 0 and summary['errors'] == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ.")
        
        return self.all_results
    
    def save_results(self, filename: str = "test_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.all_results, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        return filename
    
    def generate_html_report(self, filename: str = "test_report.html"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞"""
        html_template = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –¶–µ–Ω—Ç—Ä "–ù–æ–≤–∞—è –ñ–∏–∑–Ω—å"</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; }}
        .header {{ background: linear-gradient(135deg, #4A90E2 0%, #27AE60 100%); color: white; padding: 30px; border-radius: 10px; text-align: center; margin-bottom: 30px; }}
        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }}
        .summary-card {{ background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); text-align: center; }}
        .number {{ font-size: 2.5em; font-weight: bold; margin-bottom: 10px; }}
        .passed {{ color: #27AE60; }}
        .failed {{ color: #E74C3C; }}
        .error {{ color: #F39C12; }}
        .suite {{ background: white; margin-bottom: 20px; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }}
        .suite-header {{ background: #4A90E2; color: white; padding: 15px 20px; font-weight: bold; }}
        .test-item {{ padding: 15px 20px; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; }}
        .test-item:last-child {{ border-bottom: none; }}
        .test-status {{ padding: 5px 10px; border-radius: 5px; color: white; font-weight: bold; }}
        .status-passed {{ background: #27AE60; }}
        .status-failed {{ background: #E74C3C; }}
        .status-error {{ background: #F39C12; }}
        .execution-time {{ color: #666; font-size: 0.9em; }}
        .error-details {{ background: #ffebee; color: #c62828; padding: 10px; margin-top: 10px; border-radius: 5px; font-size: 0.9em; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß™ –û—Ç—á–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
            <p>–¶–µ–Ω—Ç—Ä –∑–¥–æ—Ä–æ–≤—å—è "–ù–æ–≤–∞—è –ñ–∏–∑–Ω—å"</p>
            <p>–°–æ–∑–¥–∞–Ω: {timestamp}</p>
        </div>
        
        <div class="summary">
            <div class="summary-card">
                <div class="number">{total_tests}</div>
                <div>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</div>
            </div>
            <div class="summary-card">
                <div class="number passed">{passed_tests}</div>
                <div>–ü—Ä–æ–π–¥–µ–Ω–æ</div>
            </div>
            <div class="summary-card">
                <div class="number failed">{failed_tests}</div>
                <div>–ü—Ä–æ–≤–∞–ª–µ–Ω–æ</div>
            </div>
            <div class="summary-card">
                <div class="number error">{error_tests}</div>
                <div>–û—à–∏–±–æ–∫</div>
            </div>
            <div class="summary-card">
                <div class="number">{execution_time:.2f}s</div>
                <div>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</div>
            </div>
            <div class="summary-card">
                <div class="number {success_class}">{success_rate:.1f}%</div>
                <div>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
            </div>
        </div>
        
        {test_details}
    </div>
</body>
</html>
        """
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤
        test_details = ""
        
        if 'validation' in self.all_results['suites']:
            validation_results = self.all_results['suites']['validation']
            test_details += '<div class="suite"><div class="suite-header">üìã –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏</div>'
            
            for test_name, test_result in validation_results['tests'].items():
                status_class = f"status-{test_result['status'].lower()}"
                test_details += f'''
                <div class="test-item">
                    <div>
                        <strong>{test_name}</strong>
                        <div class="execution-time">–í—Ä–µ–º—è: {test_result['execution_time']:.3f}s</div>
                        {f'<div class="error-details">{test_result["error"]}</div>' if test_result['error'] else ''}
                    </div>
                    <div class="test-status {status_class}">{test_result['status']}</div>
                </div>
                '''
            
            test_details += '</div>'
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        summary = self.all_results['summary']
        success_rate = (summary['passed_tests'] / summary['total_tests'] * 100) if summary['total_tests'] > 0 else 0
        success_class = 'passed' if success_rate >= 90 else ('failed' if success_rate < 70 else 'error')
        
        html_content = html_template.format(
            timestamp=datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
            total_tests=summary['total_tests'],
            passed_tests=summary['passed_tests'],
            failed_tests=summary['failed_tests'],
            error_tests=summary['error_tests'],
            execution_time=summary['execution_time'],
            success_rate=success_rate,
            success_class=success_class,
            test_details=test_details
        )
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"üìÑ HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        return filename


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--output', '-o', default='test_results',
                       help='–ë–∞–∑–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤')
    parser.add_argument('--html-only', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ HTML –æ—Ç—á–µ—Ç')
    parser.add_argument('--json-only', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ JSON –æ—Ç—á–µ—Ç')
    
    args = parser.parse_args()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    runner = ComprehensiveTestRunner()
    results = runner.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not args.html_only:
        json_file = runner.save_results(f"{args.output}.json")
    
    if not args.json_only:
        html_file = runner.generate_html_report(f"{args.output}.html")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    summary = results['summary']
    if summary['failed_tests'] == 0 and summary['error_tests'] == 0:
        sys.exit(0)  # –£—Å–ø–µ—Ö
    else:
        sys.exit(1)  # –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã


if __name__ == '__main__':
    main()
