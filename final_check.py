#!/usr/bin/env python
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'smart_secretary.settings')
django.setup()

print('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –í–ê–õ–ò–î–ê–¶–ò–ò')
print('=' * 60)

# 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω
from core.validators import NameValidator
print('\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω:')
test_names = [('–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', True), ('—Ç–µ—Å—Ç', False), ('admin', False)]
passed = 0
for name, expected in test_names:
    valid, _ = NameValidator.validate_name(name)
    status = '‚úÖ' if valid == expected else '‚ùå'
    print(f'  {status} "{name}" -> {valid} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})')
    if valid == expected:
        passed += 1
print(f'  –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(test_names)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ')

# 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
from core.validators import PhoneValidator
print('\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:')
test_phones = [('+972501234567', True), ('0501234567', True), ('123', False)]
passed = 0
for phone, expected in test_phones:
    valid, _, _ = PhoneValidator.validate_phone(phone)
    status = '‚úÖ' if valid == expected else '‚ùå'
    print(f'  {status} "{phone}" -> {valid} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})')
    if valid == expected:
        passed += 1
print(f'  –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(test_phones)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ')

# 3. –°–∏—Å—Ç–µ–º–∞ –±—ç–∫–∞–ø–∞
print('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –±—ç–∫–∞–ø–∞:')
try:
    from deployment.backup_and_rollback import BackupAndRollback
    backup_system = BackupAndRollback()
    health = backup_system.health_check()
    all_good = all(health.values())
    print(f'  {"‚úÖ" if all_good else "‚ùå"} –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {all_good}')
    for component, status in health.items():
        print(f'    {component}: {"‚úÖ" if status else "‚ùå"}')
except Exception as e:
    print(f'  ‚ùå –û—à–∏–±–∫–∞: {e}')

# 4. –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
print('\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:')
try:
    from core.validators import ValidationManager
    validator = ValidationManager()
    
    # –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    result = validator.validate_appointment_data(
        name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è
        phone="+972501234567",
        service_name="–ú–∞—Å—Å–∞–∂",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—Å–ª—É–≥—É
        specialist_name="–ê–≤—Ä–∞–∞–º",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        date="2025-12-31",
        time_str="15:00"
    )
    
    print(f'  {"‚úÖ" if result["is_valid"] else "‚ùå"} –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {result["is_valid"]}')
    if not result["is_valid"]:
        print(f'    –û—à–∏–±–∫–∏: {result["errors"]}')
        
except Exception as e:
    print(f'  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}')

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
print('\n‚úÖ –ú–æ–¥–µ–ª–∏ Django:')
try:
    from core.models import Patient, Specialist, Service, Appointment
    
    patients_count = Patient.objects.count()
    specialists_count = Specialist.objects.count()
    services_count = Service.objects.count()
    appointments_count = Appointment.objects.count()
    
    print(f'  ‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç—ã: {patients_count}')
    print(f'  ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã: {specialists_count}')
    print(f'  ‚úÖ –£—Å–ª—É–≥–∏: {services_count}')
    print(f'  ‚úÖ –ó–∞–ø–∏—Å–∏: {appointments_count}')
    
except Exception as e:
    print(f'  ‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}')

print('\n' + '=' * 60)
print('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!')
print('=' * 60)
