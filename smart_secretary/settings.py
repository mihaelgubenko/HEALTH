<<<<<<< HEAD
"""
Django settings for smart_secretary project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv('.env.local')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# TODO: ДЛЯ ПРОДАКШНА: Сгенерируйте новый SECRET_KEY и добавьте в .env.local
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-yyx43&9x^1l()a#a7x#%_q!gzv+#5t$(i^7+t5ms^ssq2##2(h')

# SECURITY WARNING: don't run with debug turned on in production!
# TODO: ДЛЯ ПРОДАКШНА: Установите DEBUG=False в .env.local
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# TODO: ДЛЯ ПРОДАКШНА: Добавьте ваш домен в ALLOWED_HOSTS в .env.local
# Пример: ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com
# Railway: разрешаем все хосты по умолчанию, можно ограничить через переменную окружения
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',') if os.getenv('ALLOWED_HOSTS') else ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',  # Наше основное приложение
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'smart_secretary.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'smart_secretary.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Database configuration for Railway
import dj_database_url

# Try to use Railway's DATABASE_URL, fallback to SQLite for local development
DATABASE_URL = os.getenv('DATABASE_URL')

if DATABASE_URL:
    # Production database (Railway PostgreSQL)
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # Development database (SQLite)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Asia/Jerusalem'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# WhiteNoise for serving static files on Railway
MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# External Services Configuration
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')

# Российские голосовые сервисы (заменяют Twilio и AWS Polly) - ЗАКОММЕНТИРОВАНО

# Yandex SpeechKit Configuration - ЗАКОММЕНТИРОВАНО
# YANDEX_SPEECHKIT_API_KEY = os.getenv('YANDEX_SPEECHKIT_API_KEY', '')
# YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID', '')

# Tinkoff VoiceKit Configuration - ЗАКОММЕНТИРОВАНО
# TINKOFF_VOICEKIT_API_KEY = os.getenv('TINKOFF_VOICEKIT_API_KEY', '')

# Mango Office Configuration - ЗАКОММЕНТИРОВАНО
# MANGO_OFFICE_API_KEY = os.getenv('MANGO_OFFICE_API_KEY', '')
# MANGO_OFFICE_API_SALT = os.getenv('MANGO_OFFICE_API_SALT', '')

# Center Configuration
CENTER_NAME = os.getenv('CENTER_NAME', 'Центр здоровья "Новая Жизнь"')
CENTER_ADDRESS = os.getenv('CENTER_ADDRESS', 'Израиль. Рамот Алеф. ул. Сулам Яков 1/3')
PHONE_MAIN = os.getenv('PHONE_MAIN', '+972545270015')
PHONE_ALT = os.getenv('PHONE_ALT', '+972545270015')
BASE_URL = os.getenv('BASE_URL', 'http://localhost:8000')

# AI Pro Playbooks flags (additive)
AI_PRO_PLAYBOOKS_ENABLED = os.getenv('AI_PRO_PLAYBOOKS_ENABLED', 'false').lower() == 'true'
try:
    AI_PRO_PLAYBOOK_STAGE = int(os.getenv('AI_PRO_PLAYBOOK_STAGE', '0'))
except ValueError:
    AI_PRO_PLAYBOOK_STAGE = 0
=======
>>>>>>> 258ead2034489f3c02e55eb3c9ed172d807187ec
