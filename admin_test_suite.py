#!/usr/bin/env python
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∫–∏ Django
–¶–µ–Ω—Ç—Ä –∑–¥–æ—Ä–æ–≤—å—è "–ù–æ–≤–∞—è –ñ–∏–∑–Ω—å"

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python admin_test_suite.py --full --report=html --cleanup
    
–û–ø—Ü–∏–∏:
    --full      - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    --report    - —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ (html|json|console)
    --cleanup   - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    --verbose   - –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
"""

import os
import sys
import time
import json
import argparse
from datetime import datetime, timedelta
from typing import Dict, List, Any, Tuple
import django
from django.db import connection
from django.test.utils import override_settings
from django.core.management import call_command
from django.template.loader import render_to_string

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'smart_secretary.settings')
django.setup()

from core.models import Patient, Service, Specialist, Appointment, FAQ, ContactMessage, DialogLog
from core.admin_dashboard import AdminDashboard
from test_data_generator import TestDataGenerator


class TestResult:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    def __init__(self, name: str, success: bool, message: str = "", duration: float = 0.0, details: Dict = None):
        self.name = name
        self.success = success
        self.message = message
        self.duration = duration
        self.details = details or {}
        self.timestamp = datetime.now()


class DatabaseTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, verbose: bool = False):
        self.verbose = verbose
        self.results = []
    
    def run_all_tests(self) -> List[TestResult]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        self.test_models_existence()
        self.test_data_integrity()
        self.test_model_relationships()
        self.test_required_fields()
        self.test_crud_operations()
        
        return self.results
    
    def test_models_existence(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        start_time = time.time()
        
        try:
            models = [Patient, Service, Specialist, Appointment, FAQ, ContactMessage, DialogLog]
            model_counts = {}
            
            for model in models:
                count = model.objects.count()
                model_counts[model.__name__] = count
                if self.verbose:
                    print(f"  {model.__name__}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π",
                True,
                f"–í—Å–µ {len(models)} –º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã",
                duration,
                {"counts": model_counts}
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_data_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        start_time = time.time()
        
        try:
            issues = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
            orphaned_appointments = Appointment.objects.filter(patient__isnull=True).count()
            if orphaned_appointments > 0:
                issues.append(f"–ó–∞–ø–∏—Å–µ–π –±–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {orphaned_appointments}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
            no_specialist = Appointment.objects.filter(specialist__isnull=True).count()
            if no_specialist > 0:
                issues.append(f"–ó–∞–ø–∏—Å–µ–π –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {no_specialist}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —É—Å–ª—É–≥
            no_service = Appointment.objects.filter(service__isnull=True).count()
            if no_service > 0:
                issues.append(f"–ó–∞–ø–∏—Å–µ–π –±–µ–∑ —É—Å–ª—É–≥: {no_service}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            from django.db.models import Count
            duplicate_phones = Patient.objects.values('phone').annotate(
                count=Count('phone')
            ).filter(count__gt=1).count()
            
            if duplicate_phones > 0:
                issues.append(f"–î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {duplicate_phones}")
            
            duration = time.time() - start_time
            success = len(issues) == 0
            message = "–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ" if success else f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}"
            
            self.results.append(TestResult(
                "–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
                success,
                message,
                duration,
                {"issues": issues}
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_model_relationships(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏"""
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–≤—è–∑–∏
            appointments_with_relations = Appointment.objects.select_related(
                'patient', 'specialist', 'service'
            ).count()
            
            total_appointments = Appointment.objects.count()
            
            duration = time.time() - start_time
            success = appointments_with_relations == total_appointments
            
            self.results.append(TestResult(
                "–°–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏",
                success,
                f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {appointments_with_relations}/{total_appointments} –∑–∞–ø–∏—Å–µ–π",
                duration
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–°–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_required_fields(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        start_time = time.time()
        
        try:
            issues = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –∏–º–µ–Ω–∏
            no_name_patients = Patient.objects.filter(name__isnull=True).count()
            if no_name_patients > 0:
                issues.append(f"–ü–∞—Ü–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –∏–º–µ–Ω–∏: {no_name_patients}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            no_phone_patients = Patient.objects.filter(phone__isnull=True).count()
            if no_phone_patients > 0:
                issues.append(f"–ü–∞—Ü–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {no_phone_patients}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª—É–≥ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            no_name_services = Service.objects.filter(name__isnull=True).count()
            if no_name_services > 0:
                issues.append(f"–£—Å–ª—É–≥ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è: {no_name_services}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –±–µ–∑ –∏–º–µ–Ω–∏
            no_name_specialists = Specialist.objects.filter(name__isnull=True).count()
            if no_name_specialists > 0:
                issues.append(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –±–µ–∑ –∏–º–µ–Ω–∏: {no_name_specialists}")
            
            duration = time.time() - start_time
            success = len(issues) == 0
            message = "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã" if success else f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}"
            
            self.results.append(TestResult(
                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
                success,
                message,
                duration,
                {"issues": issues}
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_crud_operations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
        start_time = time.time()
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            test_patient = Patient.objects.create(
                name="–¢–µ—Å—Ç –ü–∞—Ü–∏–µ–Ω—Ç",
                phone="+972000000000",
                email="test@example.com"
            )
            
            # –ß—Ç–µ–Ω–∏–µ
            retrieved_patient = Patient.objects.get(id=test_patient.id)
            assert retrieved_patient.name == "–¢–µ—Å—Ç –ü–∞—Ü–∏–µ–Ω—Ç"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            retrieved_patient.name = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ü–∞—Ü–∏–µ–Ω—Ç"
            retrieved_patient.save()
            
            updated_patient = Patient.objects.get(id=test_patient.id)
            assert updated_patient.name == "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ü–∞—Ü–∏–µ–Ω—Ç"
            
            # –£–¥–∞–ª–µ–Ω–∏–µ
            patient_id = test_patient.id
            test_patient.delete()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            assert not Patient.objects.filter(id=patient_id).exists()
            
            duration = time.time() - start_time
            self.results.append(TestResult(
                "CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏",
                True,
                "–í—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                duration
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))


class AdminInterfaceTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, verbose: bool = False):
        self.verbose = verbose
        self.results = []
    
    def run_all_tests(self) -> List[TestResult]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∞–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        print("üñ•Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        self.test_admin_models_registration()
        self.test_admin_configurations()
        self.test_search_functionality()
        self.test_filter_functionality()
        
        return self.results
    
    def test_admin_models_registration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ"""
        start_time = time.time()
        
        try:
            from core.admin import admin_site
            
            registered_models = []
            expected_models = [Patient, Service, Specialist, Appointment, FAQ, ContactMessage, DialogLog]
            
            for model in expected_models:
                if admin_site.is_registered(model):
                    registered_models.append(model.__name__)
            
            duration = time.time() - start_time
            success = len(registered_models) == len(expected_models)
            
            self.results.append(TestResult(
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ",
                success,
                f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(registered_models)}/{len(expected_models)} –º–æ–¥–µ–ª–µ–π",
                duration,
                {"registered": registered_models}
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_admin_configurations(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∞–¥–º–∏–Ω–∫–∏"""
        start_time = time.time()
        
        try:
            from core.admin import admin_site, AppointmentAdmin
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AppointmentAdmin
            appointment_admin = admin_site._registry.get(Appointment)
            
            checks = {
                "list_display": hasattr(appointment_admin, 'list_display'),
                "list_filter": hasattr(appointment_admin, 'list_filter'),
                "search_fields": hasattr(appointment_admin, 'search_fields'),
                "actions": hasattr(appointment_admin, 'actions'),
                "colored_status": hasattr(appointment_admin, 'colored_status'),
                "quick_actions": hasattr(appointment_admin, 'quick_actions')
            }
            
            passed_checks = sum(checks.values())
            total_checks = len(checks)
            
            duration = time.time() - start_time
            success = passed_checks == total_checks
            
            self.results.append(TestResult(
                "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏",
                success,
                f"–ü—Ä–æ–π–¥–µ–Ω–æ {passed_checks}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫",
                duration,
                {"checks": checks}
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_search_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
        start_time = time.time()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
            if Patient.objects.exists():
                first_patient = Patient.objects.first()
                search_results = Patient.objects.filter(name__icontains=first_patient.name[:3])
                search_works = search_results.exists()
            else:
                search_works = True  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞
            
            duration = time.time() - start_time
            
            self.results.append(TestResult(
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞",
                search_works,
                "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if search_works else "–ü–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                duration
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_filter_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        start_time = time.time()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
            pending_count = Appointment.objects.filter(status='pending').count()
            confirmed_count = Appointment.objects.filter(status='confirmed').count()
            total_count = Appointment.objects.count()
            
            filter_works = (pending_count + confirmed_count) <= total_count
            
            duration = time.time() - start_time
            
            self.results.append(TestResult(
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤",
                filter_works,
                f"–§–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç: pending={pending_count}, confirmed={confirmed_count}",
                duration,
                {
                    "pending": pending_count,
                    "confirmed": confirmed_count,
                    "total": total_count
                }
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))


class CustomFunctionalityTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, verbose: bool = False):
        self.verbose = verbose
        self.results = []
    
    def run_all_tests(self) -> List[TestResult]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
        
        self.test_dashboard_functionality()
        self.test_quick_actions()
        self.test_mass_actions()
        self.test_colored_status()
        
        return self.results
    
    def test_dashboard_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
        start_time = time.time()
        
        try:
            dashboard = AdminDashboard()
            dashboard_data = dashboard.get_dashboard_data()
            
            required_keys = [
                'appointments_today', 'appointments_week', 'appointments_month',
                'total_patients', 'appointments_by_status', 'popular_services',
                'specialists_stats', 'recent_messages'
            ]
            
            missing_keys = [key for key in required_keys if key not in dashboard_data]
            
            duration = time.time() - start_time
            success = len(missing_keys) == 0
            
            self.results.append(TestResult(
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞—à–±–æ—Ä–¥–∞",
                success,
                f"–î–∞—à–±–æ—Ä–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if success else f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {missing_keys}",
                duration,
                {"missing_keys": missing_keys, "data_keys": list(dashboard_data.keys())}
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞—à–±–æ—Ä–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_quick_actions(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        start_time = time.time()
        
        try:
            from core.admin import AppointmentAdmin
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            if not Appointment.objects.exists():
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.results.append(TestResult(
                    "–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                    True,
                    "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π",
                    time.time() - start_time
                ))
                return
            
            appointment = Appointment.objects.first()
            admin_instance = AppointmentAdmin(Appointment, None)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            colored_status = admin_instance.colored_status(appointment)
            quick_actions = admin_instance.quick_actions(appointment)
            
            duration = time.time() - start_time
            success = colored_status is not None and quick_actions is not None
            
            self.results.append(TestResult(
                "–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                success,
                "–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if success else "–û—à–∏–±–∫–∞ –≤ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö",
                duration
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_mass_actions(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        start_time = time.time()
        
        try:
            from core.admin import AppointmentAdmin
            
            admin_instance = AppointmentAdmin(Appointment, None)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            actions = admin_instance.actions
            expected_actions = ['confirm_appointments', 'cancel_appointments', 'complete_appointments']
            
            available_actions = [action for action in expected_actions if action in actions]
            
            duration = time.time() - start_time
            success = len(available_actions) == len(expected_actions)
            
            self.results.append(TestResult(
                "–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                success,
                f"–î–æ—Å—Ç—É–ø–Ω–æ {len(available_actions)}/{len(expected_actions)} –¥–µ–π—Å—Ç–≤–∏–π",
                duration,
                {"available_actions": available_actions}
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_colored_status(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤"""
        start_time = time.time()
        
        try:
            from core.admin import AppointmentAdmin
            
            if not Appointment.objects.exists():
                self.results.append(TestResult(
                    "–¶–≤–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã",
                    True,
                    "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤",
                    time.time() - start_time
                ))
                return
            
            admin_instance = AppointmentAdmin(Appointment, None)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            statuses_tested = []
            for status in ['pending', 'confirmed', 'cancelled', 'completed']:
                appointments = Appointment.objects.filter(status=status)
                if appointments.exists():
                    appointment = appointments.first()
                    colored_status = admin_instance.colored_status(appointment)
                    if colored_status:
                        statuses_tested.append(status)
            
            duration = time.time() - start_time
            success = len(statuses_tested) > 0
            
            self.results.append(TestResult(
                "–¶–≤–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã",
                success,
                f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤: {len(statuses_tested)}",
                duration,
                {"tested_statuses": statuses_tested}
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–¶–≤–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))


class PerformanceTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, verbose: bool = False):
        self.verbose = verbose
        self.results = []
    
    def run_all_tests(self) -> List[TestResult]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        self.test_dashboard_performance()
        self.test_query_optimization()
        self.test_admin_list_performance()
        
        return self.results
    
    def test_dashboard_performance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—à–±–æ—Ä–¥–∞"""
        start_time = time.time()
        
        try:
            dashboard = AdminDashboard()
            
            # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
            dashboard_start = time.time()
            dashboard_data = dashboard.get_dashboard_data()
            dashboard_duration = time.time() - dashboard_start
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π: –¥–∞—à–±–æ—Ä–¥ –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
            success = dashboard_duration < 2.0
            
            duration = time.time() - start_time
            
            self.results.append(TestResult(
                "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞—à–±–æ—Ä–¥–∞",
                success,
                f"–î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∑–∞ {dashboard_duration:.3f}—Å (–ª–∏–º–∏—Ç: 2.0—Å)",
                duration,
                {"dashboard_load_time": dashboard_duration, "limit": 2.0}
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞—à–±–æ—Ä–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_query_optimization(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        start_time = time.time()
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            connection.queries_log.clear()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏
            appointments = list(Appointment.objects.select_related('patient', 'specialist', 'service')[:10])
            
            query_count = len(connection.queries)
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π: –Ω–µ –±–æ–ª–µ–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ 10 –∑–∞–ø–∏—Å–µ–π —Å —Å–≤—è–∑—è–º–∏
            success = query_count <= 5
            
            duration = time.time() - start_time
            
            self.results.append(TestResult(
                "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤",
                success,
                f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {query_count} –∑–∞–ø—Ä–æ—Å–æ–≤ (–ª–∏–º–∏—Ç: 5)",
                duration,
                {"query_count": query_count, "limit": 5}
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))
    
    def test_admin_list_performance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ø–∏—Å–∫–æ–≤ –∞–¥–º–∏–Ω–∫–∏"""
        start_time = time.time()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
            list_start = time.time()
            appointments = Appointment.objects.select_related('patient', 'specialist', 'service')[:25]
            list(appointments)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            list_duration = time.time() - list_start
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–π: —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
            success = list_duration < 1.0
            
            duration = time.time() - start_time
            
            self.results.append(TestResult(
                "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∫–æ–≤",
                success,
                f"–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∑–∞ {list_duration:.3f}—Å (–ª–∏–º–∏—Ç: 1.0—Å)",
                duration,
                {"list_load_time": list_duration, "limit": 1.0}
            ))
            
        except Exception as e:
            duration = time.time() - start_time
            self.results.append(TestResult(
                "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∫–æ–≤",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}",
                duration
            ))


class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self, results: List[TestResult]):
        self.results = results
        self.total_tests = len(results)
        self.passed_tests = sum(1 for r in results if r.success)
        self.failed_tests = self.total_tests - self.passed_tests
        self.total_duration = sum(r.duration for r in results)
    
    def generate_console_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = []
        report.append("=" * 80)
        report.append("üè• –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ê–î–ú–ò–ù–ö–ò - –¶–ï–ù–¢–† '–ù–û–í–ê–Ø –ñ–ò–ó–ù–¨'")
        report.append("=" * 80)
        report.append(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        report.append(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        report.append(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed_tests} ‚úÖ")
        report.append(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed_tests} ‚ùå")
        report.append(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self.total_duration:.3f}—Å")
        report.append(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.passed_tests/self.total_tests*100):.1f}%")
        report.append("")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": [],
            "–ê–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å": [],
            "–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": [],
            "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": []
        }
        
        for result in self.results:
            if any(keyword in result.name.lower() for keyword in ['–º–æ–¥–µ–ª', '–¥–∞–Ω–Ω', 'crud', '—Ü–µ–ª']):
                categories["–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"].append(result)
            elif any(keyword in result.name.lower() for keyword in ['–∞–¥–º–∏–Ω', '—Ä–µ–≥–∏—Å—Ç—Ä', '–∫–æ–Ω—Ñ–∏–≥', '–ø–æ–∏—Å–∫', '—Ñ–∏–ª—å—Ç—Ä']):
                categories["–ê–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"].append(result)
            elif any(keyword in result.name.lower() for keyword in ['–¥–∞—à–±–æ—Ä–¥', '–¥–µ–π—Å—Ç–≤–∏', '—Å—Ç–∞—Ç—É—Å']):
                categories["–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"].append(result)
            elif any(keyword in result.name.lower() for keyword in ['–ø—Ä–æ–∏–∑–≤–æ–¥', '–∑–∞–ø—Ä–æ—Å', '—Å–ø–∏—Å–æ–∫']):
                categories["–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"].append(result)
        
        for category, tests in categories.items():
            if tests:
                report.append(f"üìÇ {category}:")
                for test in tests:
                    status = "‚úÖ" if test.success else "‚ùå"
                    report.append(f"   {status} {test.name}: {test.message} ({test.duration:.3f}—Å)")
                report.append("")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.failed_tests > 0:
            report.append("üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
            for result in self.results:
                if not result.success:
                    report.append(f"   ‚Ä¢ {result.name}: {result.message}")
            report.append("")
        
        report.append("=" * 80)
        return "\n".join(report)
    
    def generate_json_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞"""
        return {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total_tests": self.total_tests,
                "passed_tests": self.passed_tests,
                "failed_tests": self.failed_tests,
                "success_rate": self.passed_tests / self.total_tests * 100,
                "total_duration": self.total_duration
            },
            "results": [
                {
                    "name": result.name,
                    "success": result.success,
                    "message": result.message,
                    "duration": result.duration,
                    "details": result.details,
                    "timestamp": result.timestamp.isoformat()
                }
                for result in self.results
            ]
        }
    
    def generate_html_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞"""
        context = {
            'timestamp': datetime.now(),
            'summary': {
                'total_tests': self.total_tests,
                'passed_tests': self.passed_tests,
                'failed_tests': self.failed_tests,
                'success_rate': self.passed_tests / self.total_tests * 100,
                'total_duration': self.total_duration
            },
            'results': self.results
        }
        
        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML
        try:
            return render_to_string('admin/test_report.html', context)
        except:
            return self._generate_simple_html(context)
    
    def _generate_simple_html(self, context) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ HTML –æ—Ç—á–µ—Ç–∞"""
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∫–∏</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background: linear-gradient(135deg, #4A90E2 0%, #27AE60 100%); 
                          color: white; padding: 20px; border-radius: 8px; }}
                .summary {{ background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0; }}
                .test-result {{ margin: 10px 0; padding: 10px; border-radius: 4px; }}
                .success {{ background: #d4edda; border-left: 4px solid #28a745; }}
                .failure {{ background: #f8d7da; border-left: 4px solid #dc3545; }}
                .duration {{ color: #6c757d; font-size: 0.9em; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üè• –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∫–∏</h1>
                <p>–¶–µ–Ω—Ç—Ä –∑–¥–æ—Ä–æ–≤—å—è "–ù–æ–≤–∞—è –ñ–∏–∑–Ω—å" - {context['timestamp'].strftime('%d.%m.%Y %H:%M')}</p>
            </div>
            
            <div class="summary">
                <h2>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                <p><strong>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</strong> {context['summary']['total_tests']}</p>
                <p><strong>–ü—Ä–æ–π–¥–µ–Ω–æ:</strong> {context['summary']['passed_tests']} ‚úÖ</p>
                <p><strong>–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:</strong> {context['summary']['failed_tests']} ‚ùå</p>
                <p><strong>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</strong> {context['summary']['success_rate']:.1f}%</p>
                <p><strong>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {context['summary']['total_duration']:.3f}—Å</p>
            </div>
            
            <h2>üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
        """
        
        for result in context['results']:
            css_class = "success" if result.success else "failure"
            status = "‚úÖ" if result.success else "‚ùå"
            html += f"""
            <div class="test-result {css_class}">
                <strong>{status} {result.name}</strong><br>
                {result.message}
                <div class="duration">–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration:.3f}—Å</div>
            </div>
            """
        
        html += """
        </body>
        </html>
        """
        return html


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∫–∏')
    parser.add_argument('--full', action='store_true', help='–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
    parser.add_argument('--report', choices=['html', 'json', 'console'], default='console', help='–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞')
    parser.add_argument('--cleanup', action='store_true', help='–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è')
    parser.add_argument('--verbose', action='store_true', help='–î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å')
    
    args = parser.parse_args()
    
    print("üè• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–î–ú–ò–ù–ö–ò - –¶–ï–ù–¢–† '–ù–û–í–ê–Ø –ñ–ò–ó–ù–¨'")
    print("=" * 50)
    
    all_results = []
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.cleanup:
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        generator = TestDataGenerator()
        generator.generate_test_data()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_tester = DatabaseTester(args.verbose)
        all_results.extend(db_tester.run_all_tests())
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        admin_tester = AdminInterfaceTester(args.verbose)
        all_results.extend(admin_tester.run_all_tests())
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        custom_tester = CustomFunctionalityTester(args.verbose)
        all_results.extend(custom_tester.run_all_tests())
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ --full)
        if args.full:
            perf_tester = PerformanceTester(args.verbose)
            all_results.extend(perf_tester.run_all_tests())
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        report_generator = ReportGenerator(all_results)
        
        if args.report == 'console':
            print(report_generator.generate_console_report())
        elif args.report == 'json':
            json_report = report_generator.generate_json_report()
            with open('admin_test_report.json', 'w', encoding='utf-8') as f:
                json.dump(json_report, f, ensure_ascii=False, indent=2)
            print(f"üìÑ JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ admin_test_report.json")
        elif args.report == 'html':
            html_report = report_generator.generate_html_report()
            with open('admin_test_report.html', 'w', encoding='utf-8') as f:
                f.write(html_report)
            print(f"üìÑ HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ admin_test_report.html")
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if args.cleanup:
            print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            generator = TestDataGenerator()
            generator.cleanup_test_data()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    failed_tests = sum(1 for r in all_results if not r.success)
    sys.exit(0 if failed_tests == 0 else 1)


if __name__ == '__main__':
    main()
